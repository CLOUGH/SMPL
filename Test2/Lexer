/* Specification for ECOLI tokens */

// user customisations
import java_cup.runtime.*;

// Jlex directives
    
%%

%cup
%public

%class Lexer

%type java_cup.runtime.Symbol

%eofval{
	return new Symbol(sym.EOF);
%eofval}

%state STRINGMODE,COMMENT,LINECOMMENT

%char
%line

%{
    String text;

    StringBuffer string = new StringBuffer();


    public int getChar() {
	return yychar + 1;
    }

    public int getLine() {
	return yyline + 1;
    }

    public String getText() {
	return yytext();
    }
%}

nl = \n\r
tab = \\\t
nw = \\\n
bs = \\\\


cc = \b\f{nl}

ws = {cc}\t" "

num = [0-9]
alpha = [A-Za-z_]
alphanum = ({alpha}|{num})
symbol = [+|-|*|%]
nodigit = ({symbol}|{alpha})
rest = ("#"|{alphanum}|{symbol})+
%%

<YYINITIAL>	{nl}	{
                        //skip newline, but reset char counter
			yychar = 0;
			}
<YYINITIAL>	{ws}	{
			// skip whitespace
			}
<COMMENT>      "*/"    {yybegin (YYINITIAL);}
<YYINITIAL>    "/*"    {yybegin(COMMENT);}
<COMMENT>      {ws}	{}
<COMMENT>      {nl}	{}
<COMMENT>      .	{}

<LINECOMMENT>   {nl}	{yybegin (YYINITIAL);}
<YYINITIAL>     "//"    {yybegin(LINECOMMENT);}
<LINECOMMENT>   {ws}	{}
<LINECOMMENT>   .	{}


<YYINITIAL> {ws}"+"{ws} {return new Symbol(sym.ADD);}
<YYINITIAL> {ws}"-"{ws} {return new Symbol(sym.SUB);}
<YYINITIAL> {ws}"*"{ws} {return new Symbol(sym.MUL);}
<YYINITIAL> {ws}"/"{ws} {return new Symbol(sym.DIV);}
<YYINITIAL> {ws}"%"{ws} {return new Symbol(sym.MOD);}

<YYINITIAL> {ws}"&"{ws} {return new Symbol(sym.BITAND);}
<YYINITIAL> {ws}"|"{ws} {return new Symbol(sym.BITOR);}
<YYINITIAL> {ws}"~"{ws} {return new Symbol(sym.BITNOT);}
<YYINITIAL> {ws}"="{ws} {return new Symbol(sym.EQUAL);}
<YYINITIAL> {ws}">"{ws} {return new Symbol(sym.GREATER);}
<YYINITIAL> {ws}"<"{ws} {return new Symbol(sym.LESS);}
<YYINITIAL> {ws}">="{ws} {return new Symbol(sym.GREATEREQ);}
<YYINITIAL> {ws}"<="{ws} {return new Symbol(sym.LESSEQ);}
<YYINITIAL> {ws}"!="{ws} {return new Symbol (sym.NOTEQ);}

<YYINITIAL> {ws}":="{ws} {return new Symbol (sym.ASSIGN);}

<YYINITIAL> {ws}"and"{ws} {return new Symbol(sym.AND);}
<YYINITIAL> {ws}"or"{ws} {return new Symbol(sym.OR);}
<YYINITIAL> "not"{ws} {return new Symbol(sym.NOT);}

<YYINITIAL> {ws}"@"{ws} {return new Symbol(sym.CONCAT);}

<YYINITIAL> "print" {return new Symbol (sym.PRINT);}
<YYINITIAL> "println" {return new Symbol (sym.PRINTLN);}
<YYINITIAL> "def" {return new Symbol (sym.DEF);}
<YYINITIAL> "case" {return new Symbol (sym.CASE);}
<YYINITIAL> "let" {return new Symbol(sym.LET);}
<YYINITIAL> "call" {return new Symbol(sym.CALL);}
<YYINITIAL> "if" {return new Symbol(sym.IF);}
<YYINITIAL> "then" {return new Symbol(sym.THEN);}
<YYINITIAL> "else" {return new Symbol(sym.ELSE);}
<YYINITIAL> "be" {return new Symbol(sym.BE);}
<YYINITIAL> "proc" {return new Symbol(sym.PROC);}
<YYINITIAL> "pair" {return new Symbol(sym.PAIR);}
<YYINITIAL> "pair?" {return new Symbol(sym.PAIRQ);}
<YYINITIAL> "eqv?" {return new Symbol(sym.EQVQ);}
<YYINITIAL> "equal?" {return new Symbol(sym.EQUALQ);}
<YYINITIAL> "car" {return new Symbol(sym.CAR);}
<YYINITIAL> "cdr" {return new Symbol(sym.CDR);}
<YYINITIAL> "list" {return new Symbol(sym.LIST);}
<YYINITIAL> "#"("t"|"f") {return new Symbol(sym.BOOLEAN, yytext());}
 
<YYINITIAL>	"{"	{return new Symbol(sym.LCURL);}
<YYINITIAL>	"}"	{return new Symbol(sym.RCURL);}


<YYINITIAL>	"("	{return new Symbol(sym.LPAREN);}
<YYINITIAL>	")"	{return new Symbol(sym.RPAREN);}
<YYINITIAL>     ","     {return new Symbol(sym.COMMA);}
<YYINITIAL>     ":"     {return new Symbol(sym.COLON);}


<YYINITIAL>     "#b"(0|1)+     {return new Symbol(sym.BIN, yytext());}
<YYINITIAL>     "#x"([a-f]|[0-9])+     {return new Symbol(sym.HEX, yytext());}


<YYINITIAL>    {nodigit}({rest})*
                 
               { // VARIABLE
	       return new Symbol(sym.VARIABLE, yytext());
	       }

<YYINITIAL>    ({num})+ {
	       // INTEGER
	       return new Symbol(sym.INTEGER, 
				 new Integer(yytext()));
	       }
<YYINITIAL>	"."	{ //. on a line by itself is EOF
			  return new Symbol(sym.EOF);}

<YYINITIAL>	";"	{ return new Symbol(sym.SEMICOL);}

<YYINITIAL>  \" {yybegin(STRINGMODE); text = new String(); }
<STRINGMODE>  \\n	{text = text.concat("\n");}
<STRINGMODE>  \\t	{text = text.concat("\t");}
<STRINGMODE>  \\f	{text = text.concat("\f");}
<STRINGMODE>  \\\\	{text = text.concat("\\");}
<STRINGMODE> \" {yybegin(YYINITIAL); return new Symbol(sym.STRING, new String(text));}
<STRINGMODE>	.	{text = text.concat(yytext());}






