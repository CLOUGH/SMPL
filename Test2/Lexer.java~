/* Specification for ECOLI tokens */
// user customisations
import java_cup.runtime.*;
// Jlex directives


public class Lexer implements java_cup.runtime.Scanner {
	private final int YY_BUFFER_SIZE = 512;
	private final int YY_F = -1;
	private final int YY_NO_STATE = -1;
	private final int YY_NOT_ACCEPT = 0;
	private final int YY_START = 1;
	private final int YY_END = 2;
	private final int YY_NO_ANCHOR = 4;
	private final int YY_BOL = 128;
	private final int YY_EOF = 129;

    String text;
    StringBuffer string = new StringBuffer();
    public int getChar() {
	return yychar + 1;
    }
    public int getLine() {
	return yyline + 1;
    }
    public String getText() {
	return yytext();
    }
	private java.io.BufferedReader yy_reader;
	private int yy_buffer_index;
	private int yy_buffer_read;
	private int yy_buffer_start;
	private int yy_buffer_end;
	private char yy_buffer[];
	private int yychar;
	private int yyline;
	private boolean yy_at_bol;
	private int yy_lexical_state;

	public Lexer (java.io.Reader reader) {
		this ();
		if (null == reader) {
			throw (new Error("Error: Bad input stream initializer."));
		}
		yy_reader = new java.io.BufferedReader(reader);
	}

	public Lexer (java.io.InputStream instream) {
		this ();
		if (null == instream) {
			throw (new Error("Error: Bad input stream initializer."));
		}
		yy_reader = new java.io.BufferedReader(new java.io.InputStreamReader(instream));
	}

	private Lexer () {
		yy_buffer = new char[YY_BUFFER_SIZE];
		yy_buffer_read = 0;
		yy_buffer_index = 0;
		yy_buffer_start = 0;
		yy_buffer_end = 0;
		yychar = 0;
		yyline = 0;
		yy_at_bol = true;
		yy_lexical_state = YYINITIAL;
	}

	private boolean yy_eof_done = false;
	private final int YYINITIAL = 0;
	private final int COMMENT = 2;
	private final int LINECOMMENT = 3;
	private final int STRINGMODE = 1;
	private final int yy_state_dtrans[] = {
		0,
		115,
		116,
		117
	};
	private void yybegin (int state) {
		yy_lexical_state = state;
	}
	private int yy_advance ()
		throws java.io.IOException {
		int next_read;
		int i;
		int j;

		if (yy_buffer_index < yy_buffer_read) {
			return yy_buffer[yy_buffer_index++];
		}

		if (0 != yy_buffer_start) {
			i = yy_buffer_start;
			j = 0;
			while (i < yy_buffer_read) {
				yy_buffer[j] = yy_buffer[i];
				++i;
				++j;
			}
			yy_buffer_end = yy_buffer_end - yy_buffer_start;
			yy_buffer_start = 0;
			yy_buffer_read = j;
			yy_buffer_index = j;
			next_read = yy_reader.read(yy_buffer,
					yy_buffer_read,
					yy_buffer.length - yy_buffer_read);
			if (-1 == next_read) {
				return YY_EOF;
			}
			yy_buffer_read = yy_buffer_read + next_read;
		}

		while (yy_buffer_index >= yy_buffer_read) {
			if (yy_buffer_index >= yy_buffer.length) {
				yy_buffer = yy_double(yy_buffer);
			}
			next_read = yy_reader.read(yy_buffer,
					yy_buffer_read,
					yy_buffer.length - yy_buffer_read);
			if (-1 == next_read) {
				return YY_EOF;
			}
			yy_buffer_read = yy_buffer_read + next_read;
		}
		return yy_buffer[yy_buffer_index++];
	}
	private void yy_move_end () {
		if (yy_buffer_end > yy_buffer_start &&
		    '\n' == yy_buffer[yy_buffer_end-1])
			yy_buffer_end--;
		if (yy_buffer_end > yy_buffer_start &&
		    '\r' == yy_buffer[yy_buffer_end-1])
			yy_buffer_end--;
	}
	private boolean yy_last_was_cr=false;
	private void yy_mark_start () {
		int i;
		for (i = yy_buffer_start; i < yy_buffer_index; ++i) {
			if ('\n' == yy_buffer[i] && !yy_last_was_cr) {
				++yyline;
			}
			if ('\r' == yy_buffer[i]) {
				++yyline;
				yy_last_was_cr=true;
			} else yy_last_was_cr=false;
		}
		yychar = yychar
			+ yy_buffer_index - yy_buffer_start;
		yy_buffer_start = yy_buffer_index;
	}
	private void yy_mark_end () {
		yy_buffer_end = yy_buffer_index;
	}
	private void yy_to_mark () {
		yy_buffer_index = yy_buffer_end;
		yy_at_bol = (yy_buffer_end > yy_buffer_start) &&
		            ('\r' == yy_buffer[yy_buffer_end-1] ||
		             '\n' == yy_buffer[yy_buffer_end-1] ||
		             2028/*LS*/ == yy_buffer[yy_buffer_end-1] ||
		             2029/*PS*/ == yy_buffer[yy_buffer_end-1]);
	}
	private java.lang.String yytext () {
		return (new java.lang.String(yy_buffer,
			yy_buffer_start,
			yy_buffer_end - yy_buffer_start));
	}
	private int yylength () {
		return yy_buffer_end - yy_buffer_start;
	}
	private char[] yy_double (char buf[]) {
		int i;
		char newbuf[];
		newbuf = new char[2*buf.length];
		for (i = 0; i < buf.length; ++i) {
			newbuf[i] = buf[i];
		}
		return newbuf;
	}
	private final int YY_E_INTERNAL = 0;
	private final int YY_E_MATCH = 1;
	private java.lang.String yy_error_string[] = {
		"Error: Internal error.\n",
		"Error: Unmatched input.\n"
	};
	private void yy_error (int code,boolean fatal) {
		java.lang.System.out.print(yy_error_string[code]);
		java.lang.System.out.flush();
		if (fatal) {
			throw new Error("Fatal Error.\n");
		}
	}
	private int[][] unpackFromString(int size1, int size2, String st) {
		int colonIndex = -1;
		String lengthString;
		int sequenceLength = 0;
		int sequenceInteger = 0;

		int commaIndex;
		String workString;

		int res[][] = new int[size1][size2];
		for (int i= 0; i < size1; i++) {
			for (int j= 0; j < size2; j++) {
				if (sequenceLength != 0) {
					res[i][j] = sequenceInteger;
					sequenceLength--;
					continue;
				}
				commaIndex = st.indexOf(',');
				workString = (commaIndex==-1) ? st :
					st.substring(0, commaIndex);
				st = st.substring(commaIndex+1);
				colonIndex = workString.indexOf(':');
				if (colonIndex == -1) {
					res[i][j]=Integer.parseInt(workString);
					continue;
				}
				lengthString =
					workString.substring(colonIndex+1);
				sequenceLength=Integer.parseInt(lengthString);
				workString=workString.substring(0,colonIndex);
				sequenceInteger=Integer.parseInt(workString);
				res[i][j] = sequenceInteger;
				sequenceLength--;
			}
		}
		return res;
	}
	private int yy_acpt[] = {
		/* 0 */ YY_NOT_ACCEPT,
		/* 1 */ YY_NO_ANCHOR,
		/* 2 */ YY_NO_ANCHOR,
		/* 3 */ YY_NO_ANCHOR,
		/* 4 */ YY_NO_ANCHOR,
		/* 5 */ YY_NO_ANCHOR,
		/* 6 */ YY_NO_ANCHOR,
		/* 7 */ YY_NO_ANCHOR,
		/* 8 */ YY_NO_ANCHOR,
		/* 9 */ YY_NO_ANCHOR,
		/* 10 */ YY_NO_ANCHOR,
		/* 11 */ YY_NO_ANCHOR,
		/* 12 */ YY_NO_ANCHOR,
		/* 13 */ YY_NO_ANCHOR,
		/* 14 */ YY_NO_ANCHOR,
		/* 15 */ YY_NO_ANCHOR,
		/* 16 */ YY_NO_ANCHOR,
		/* 17 */ YY_NO_ANCHOR,
		/* 18 */ YY_NO_ANCHOR,
		/* 19 */ YY_NO_ANCHOR,
		/* 20 */ YY_NO_ANCHOR,
		/* 21 */ YY_NO_ANCHOR,
		/* 22 */ YY_NO_ANCHOR,
		/* 23 */ YY_NO_ANCHOR,
		/* 24 */ YY_NO_ANCHOR,
		/* 25 */ YY_NO_ANCHOR,
		/* 26 */ YY_NO_ANCHOR,
		/* 27 */ YY_NO_ANCHOR,
		/* 28 */ YY_NO_ANCHOR,
		/* 29 */ YY_NO_ANCHOR,
		/* 30 */ YY_NO_ANCHOR,
		/* 31 */ YY_NO_ANCHOR,
		/* 32 */ YY_NO_ANCHOR,
		/* 33 */ YY_NO_ANCHOR,
		/* 34 */ YY_NO_ANCHOR,
		/* 35 */ YY_NO_ANCHOR,
		/* 36 */ YY_NO_ANCHOR,
		/* 37 */ YY_NO_ANCHOR,
		/* 38 */ YY_NO_ANCHOR,
		/* 39 */ YY_NO_ANCHOR,
		/* 40 */ YY_NO_ANCHOR,
		/* 41 */ YY_NO_ANCHOR,
		/* 42 */ YY_NO_ANCHOR,
		/* 43 */ YY_NO_ANCHOR,
		/* 44 */ YY_NO_ANCHOR,
		/* 45 */ YY_NO_ANCHOR,
		/* 46 */ YY_NO_ANCHOR,
		/* 47 */ YY_NO_ANCHOR,
		/* 48 */ YY_NO_ANCHOR,
		/* 49 */ YY_NO_ANCHOR,
		/* 50 */ YY_NO_ANCHOR,
		/* 51 */ YY_NO_ANCHOR,
		/* 52 */ YY_NO_ANCHOR,
		/* 53 */ YY_NO_ANCHOR,
		/* 54 */ YY_NO_ANCHOR,
		/* 55 */ YY_NO_ANCHOR,
		/* 56 */ YY_NO_ANCHOR,
		/* 57 */ YY_NO_ANCHOR,
		/* 58 */ YY_NO_ANCHOR,
		/* 59 */ YY_NO_ANCHOR,
		/* 60 */ YY_NO_ANCHOR,
		/* 61 */ YY_NO_ANCHOR,
		/* 62 */ YY_NO_ANCHOR,
		/* 63 */ YY_NO_ANCHOR,
		/* 64 */ YY_NO_ANCHOR,
		/* 65 */ YY_NO_ANCHOR,
		/* 66 */ YY_NO_ANCHOR,
		/* 67 */ YY_NO_ANCHOR,
		/* 68 */ YY_NO_ANCHOR,
		/* 69 */ YY_NOT_ACCEPT,
		/* 70 */ YY_NO_ANCHOR,
		/* 71 */ YY_NO_ANCHOR,
		/* 72 */ YY_NO_ANCHOR,
		/* 73 */ YY_NOT_ACCEPT,
		/* 74 */ YY_NO_ANCHOR,
		/* 75 */ YY_NOT_ACCEPT,
		/* 76 */ YY_NO_ANCHOR,
		/* 77 */ YY_NOT_ACCEPT,
		/* 78 */ YY_NO_ANCHOR,
		/* 79 */ YY_NOT_ACCEPT,
		/* 80 */ YY_NO_ANCHOR,
		/* 81 */ YY_NOT_ACCEPT,
		/* 82 */ YY_NO_ANCHOR,
		/* 83 */ YY_NOT_ACCEPT,
		/* 84 */ YY_NO_ANCHOR,
		/* 85 */ YY_NOT_ACCEPT,
		/* 86 */ YY_NO_ANCHOR,
		/* 87 */ YY_NOT_ACCEPT,
		/* 88 */ YY_NO_ANCHOR,
		/* 89 */ YY_NOT_ACCEPT,
		/* 90 */ YY_NO_ANCHOR,
		/* 91 */ YY_NOT_ACCEPT,
		/* 92 */ YY_NO_ANCHOR,
		/* 93 */ YY_NOT_ACCEPT,
		/* 94 */ YY_NO_ANCHOR,
		/* 95 */ YY_NOT_ACCEPT,
		/* 96 */ YY_NO_ANCHOR,
		/* 97 */ YY_NOT_ACCEPT,
		/* 98 */ YY_NO_ANCHOR,
		/* 99 */ YY_NOT_ACCEPT,
		/* 100 */ YY_NO_ANCHOR,
		/* 101 */ YY_NOT_ACCEPT,
		/* 102 */ YY_NO_ANCHOR,
		/* 103 */ YY_NOT_ACCEPT,
		/* 104 */ YY_NO_ANCHOR,
		/* 105 */ YY_NOT_ACCEPT,
		/* 106 */ YY_NO_ANCHOR,
		/* 107 */ YY_NOT_ACCEPT,
		/* 108 */ YY_NOT_ACCEPT,
		/* 109 */ YY_NOT_ACCEPT,
		/* 110 */ YY_NOT_ACCEPT,
		/* 111 */ YY_NOT_ACCEPT,
		/* 112 */ YY_NOT_ACCEPT,
		/* 113 */ YY_NOT_ACCEPT,
		/* 114 */ YY_NOT_ACCEPT,
		/* 115 */ YY_NOT_ACCEPT,
		/* 116 */ YY_NOT_ACCEPT,
		/* 117 */ YY_NOT_ACCEPT,
		/* 118 */ YY_NO_ANCHOR,
		/* 119 */ YY_NOT_ACCEPT,
		/* 120 */ YY_NO_ANCHOR,
		/* 121 */ YY_NO_ANCHOR,
		/* 122 */ YY_NO_ANCHOR,
		/* 123 */ YY_NO_ANCHOR,
		/* 124 */ YY_NO_ANCHOR,
		/* 125 */ YY_NO_ANCHOR,
		/* 126 */ YY_NO_ANCHOR,
		/* 127 */ YY_NO_ANCHOR,
		/* 128 */ YY_NO_ANCHOR,
		/* 129 */ YY_NO_ANCHOR,
		/* 130 */ YY_NO_ANCHOR,
		/* 131 */ YY_NO_ANCHOR,
		/* 132 */ YY_NO_ANCHOR,
		/* 133 */ YY_NO_ANCHOR,
		/* 134 */ YY_NO_ANCHOR,
		/* 135 */ YY_NO_ANCHOR
	};
	private int yy_cmap[] = unpackFromString(1,130,
"5:8,2:2,1,5,2,1,5:18,2,15,49,37,5,8,9,5,40,41,3,6,42,7,47,4,43:2,45:8,16,48" +
",14,12,13,33,23,46:26,5,50,5:2,46,5,17,32,29,19,27,28,46,31,25,46:2,26,46,1" +
"8,20,24,34,21,30,22,36,35,46,44,46:2,38,10,39,11,5,0:2")[0];

	private int yy_rmap[] = unpackFromString(1,136,
"0,1,2:2,3,1:6,4,1:5,3:2,1:13,3:4,5,6,1:6,3,7,3:3,1,3:2,1:2,8,1,3,1:7,9,1:4," +
"10,11,12,1,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,3" +
"4,35,36,37,38,39,40,41,42,43,44,5,45,6,46,47,48,49,50,51,52,53,54,55,56,57," +
"58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73")[0];

	private int yy_nxt[][] = unpackFromString(74,51,
"1,2,3,4,69,-1,4,-1,4,-1,4,-1:5,5,4,131,118,4:2,132,-1,133,70,120,134,4,121," +
"4:2,74,-1,4:3,73,6,7,8,9,10,11,4,11,4,12,13,14,-1:55,75,77,-1,79,81,83,85,8" +
"7,89,91,93,95,97,119,99,-1:2,101,-1:2,103,-1:30,4,-1:2,4,-1,4,-1,4,-1:6,4:6" +
",-1,4:9,-1,4:4,-1:5,4:4,-1:47,11,-1,11,-1:48,36,-1:24,37,-1,37,-1:7,37:3,-1" +
":2,37,-1:10,37,-1,37,-1:8,4,-1:2,4,-1,4,-1,4,-1:6,4:6,-1,4:9,53,4:4,-1:5,4:" +
"4,-1:7,4,-1:2,4,-1,4,-1,4,-1:6,4:6,-1,4:2,106,4:6,-1,4:4,-1:5,4:4,-1:8,65,-" +
"1:49,15,16,-1:49,4,-1:2,4,-1,4,-1,4,-1:6,4:6,-1,4:4,17,4:4,-1,4:4,-1:5,4:4," +
"-1:22,59,-1:3,60,-1:5,61,-1:21,62,-1:22,19,-1:5,19,-1:3,105,-1:11,107,-1:9," +
"4,-1:2,4,-1,4,-1,4,-1:6,4:6,-1,4:3,18,4:5,-1,4:4,-1:5,4:4,-1:5,20:2,-1:51,4" +
",-1:2,4,-1,4,-1,4,-1:6,4:6,-1,4:4,32,4:4,-1,4:4,-1:5,4:4,-1:5,21:2,-1:51,4," +
"-1:2,4,-1,4,-1,4,-1:6,4:5,33,-1,4:9,-1,4:4,-1:5,4:4,-1:5,22:2,-1:51,4,-1:2," +
"4,-1,4,-1,4,-1:6,4:4,34,4,-1,4:2,98,4:3,100,4:2,-1,4:4,-1:5,4:4,-1:5,23:2,-" +
"1:51,4,-1:2,4,-1,4,-1,4,-1:6,4:4,35,4,-1,4:9,-1,4:4,-1:5,4:4,-1:5,24:2,-1:4" +
"9,43:2,4,-1:2,4,-1,4,-1,4,-1:6,4:6,-1,4:9,-1,4:4,-1:5,4:4,-1:5,25:2,-1:51,4" +
",-1:2,4,-1,4,-1,4,-1:6,4,44,4:4,-1,4:9,-1,4:4,-1:5,4:4,-1:5,26:2,-1:51,4,-1" +
":2,4,-1,4,-1,4,-1:6,4:4,45,4,-1,4:9,-1,4:4,-1:5,4:4,-1:5,27:2,-1:51,4,-1:2," +
"4,-1,4,-1,4,-1:6,4:6,-1,4:5,46,4:3,-1,4:4,-1:5,4:4,-1:5,28:2,-1:51,4,-1:2,4" +
",-1,4,-1,4,-1:6,4:5,47,-1,4:9,-1,4:4,-1:5,4:4,-1:5,29:2,-1:9,108,-1:41,4,-1" +
":2,4,-1,4,-1,4,-1:6,4:6,-1,4:3,48,4:5,-1,4:4,-1:5,4:4,-1:5,30:2,-1:9,109,-1" +
":41,4,-1:2,4,-1,4,-1,4,-1:6,4:6,-1,4:9,49,4:4,-1:5,4:4,-1:16,110,-1:41,4,-1" +
":2,4,-1,4,-1,4,-1:6,4:6,-1,4:2,50,4:6,-1,4:4,-1:5,4:4,-1:22,112,-1:35,4,-1:" +
"2,4,-1,4,-1,4,-1:6,4:6,-1,4:3,51,4:5,-1,4:4,-1:5,4:4,-1:25,113,-1:32,4,-1:2" +
",4,-1,4,-1,4,-1:6,4:5,54,-1,4:9,-1,4:4,-1:5,4:4,-1:5,31:2,-1:51,4,-1:2,4,-1" +
",4,-1,4,-1:6,4:6,-1,4:9,55,4:4,-1:5,4:4,-1:7,4,-1:2,4,-1,4,-1,4,-1:6,4,56,4" +
":4,-1,4:9,-1,4:4,-1:5,4:4,-1:5,38:2,-1:49,39:2,-1:49,40:2,-1:49,41:2,-1:67," +
"114,-1:32,42:2,-1:49,52:2,-1:48,1,-1,57:47,58,71,1,63:2,64,72:47,1,66,67,68" +
":48,-1:3,4,-1:2,4,-1,4,-1,4,-1:6,4:6,-1,4:3,76,4:5,-1,4:4,-1:5,4:4,-1:16,11" +
"1,-1:41,4,-1:2,4,-1,4,-1,4,-1:6,4:6,-1,4,126,4,78,4:5,-1,4:4,-1:5,4:4,-1:7," +
"4,-1:2,4,-1,4,-1,4,-1:6,80,4,82,4:3,-1,4:9,-1,4:4,-1:5,4:4,-1:7,4,-1:2,4,-1" +
",4,-1,4,-1:6,4:5,84,-1,4:9,-1,4:4,-1:5,4:4,-1:7,4,-1:2,4,-1,4,-1,4,-1:6,4:6" +
",-1,4:3,86,4:5,-1,4:4,-1:5,4:4,-1:7,4,-1:2,4,-1,4,-1,4,-1:6,4:6,-1,4,88,4:7" +
",-1,4:4,-1:5,4:4,-1:7,4,-1:2,4,-1,4,-1,4,-1:6,4:3,90,4:2,-1,4,129,4:7,-1,4:" +
"4,-1:5,4:4,-1:7,4,-1:2,4,-1,4,-1,4,-1:6,4:6,-1,4:6,92,4:2,-1,4:4,-1:5,4:4,-" +
"1:7,4,-1:2,4,-1,4,-1,4,-1:6,4:6,-1,4:6,94,4:2,-1,4:4,-1:5,4:4,-1:7,4,-1:2,4" +
",-1,4,-1,4,-1:6,4:6,-1,4:9,-1,4,96,135,4,-1:5,4:4,-1:7,4,-1:2,4,-1,4,-1,4,-" +
"1:6,4,102,4:4,-1,4:9,-1,4:4,-1:5,4:4,-1:7,4,-1:2,4,-1,4,-1,4,-1:6,4:6,-1,4:" +
"2,104,4:6,-1,4:4,-1:5,4:4,-1:7,4,-1:2,4,-1,4,-1,4,-1:6,4:3,122,4:2,-1,4:9,-" +
"1,4:4,-1:5,4:4,-1:7,4,-1:2,4,-1,4,-1,4,-1:6,4:6,-1,4:7,123,4,-1,4:4,-1:5,4:" +
"4,-1:7,4,-1:2,4,-1,4,-1,4,-1:6,124,4:3,125,4,-1,4:9,-1,4:4,-1:5,4:4,-1:7,4," +
"-1:2,4,-1,4,-1,4,-1:6,4:6,-1,4:2,127,4:6,-1,128,4:3,-1:5,4:4,-1:7,4,-1:2,4," +
"-1,4,-1,4,-1:6,130,4:5,-1,4:9,-1,4:4,-1:5,4:4,-1:4");

	public java_cup.runtime.Symbol next_token ()
		throws java.io.IOException {
		int yy_lookahead;
		int yy_anchor = YY_NO_ANCHOR;
		int yy_state = yy_state_dtrans[yy_lexical_state];
		int yy_next_state = YY_NO_STATE;
		int yy_last_accept_state = YY_NO_STATE;
		boolean yy_initial = true;
		int yy_this_accept;

		yy_mark_start();
		yy_this_accept = yy_acpt[yy_state];
		if (YY_NOT_ACCEPT != yy_this_accept) {
			yy_last_accept_state = yy_state;
			yy_mark_end();
		}
		while (true) {
			if (yy_initial && yy_at_bol) yy_lookahead = YY_BOL;
			else yy_lookahead = yy_advance();
			yy_next_state = YY_F;
			yy_next_state = yy_nxt[yy_rmap[yy_state]][yy_cmap[yy_lookahead]];
			if (YY_EOF == yy_lookahead && true == yy_initial) {

	return new Symbol(sym.EOF);
			}
			if (YY_F != yy_next_state) {
				yy_state = yy_next_state;
				yy_initial = false;
				yy_this_accept = yy_acpt[yy_state];
				if (YY_NOT_ACCEPT != yy_this_accept) {
					yy_last_accept_state = yy_state;
					yy_mark_end();
				}
			}
			else {
				if (YY_NO_STATE == yy_last_accept_state) {
					throw (new Error("Lexical Error: Unmatched Input."));
				}
				else {
					yy_anchor = yy_acpt[yy_last_accept_state];
					if (0 != (YY_END & yy_anchor)) {
						yy_move_end();
					}
					yy_to_mark();
					switch (yy_last_accept_state) {
					case 1:
						
					case -2:
						break;
					case 2:
						{
                        //skip newline, but reset char counter
			yychar = 0;
			}
					case -3:
						break;
					case 3:
						{
			// skip whitespace
			}
					case -4:
						break;
					case 4:
						{ // VARIABLE
	       return new Symbol(sym.VARIABLE, yytext());
	       }
					case -5:
						break;
					case 5:
						{return new Symbol(sym.COLON);}
					case -6:
						break;
					case 6:
						{return new Symbol(sym.LCURL);}
					case -7:
						break;
					case 7:
						{return new Symbol(sym.RCURL);}
					case -8:
						break;
					case 8:
						{return new Symbol(sym.LPAREN);}
					case -9:
						break;
					case 9:
						{return new Symbol(sym.RPAREN);}
					case -10:
						break;
					case 10:
						{return new Symbol(sym.COMMA);}
					case -11:
						break;
					case 11:
						{
	       // INTEGER
	       return new Symbol(sym.INTEGER, 
				 new Integer(yytext()));
	       }
					case -12:
						break;
					case 12:
						{ //. on a line by itself is EOF
			  return new Symbol(sym.EOF);}
					case -13:
						break;
					case 13:
						{ return new Symbol(sym.SEMICOL);}
					case -14:
						break;
					case 14:
						{yybegin(STRINGMODE); text = new String(); }
					case -15:
						break;
					case 15:
						{yybegin(COMMENT);}
					case -16:
						break;
					case 16:
						{yybegin(LINECOMMENT);}
					case -17:
						break;
					case 17:
						{return new Symbol(sym.IF);}
					case -18:
						break;
					case 18:
						{return new Symbol(sym.BE);}
					case -19:
						break;
					case 19:
						{return new Symbol(sym.BOOLEAN, yytext());}
					case -20:
						break;
					case 20:
						{return new Symbol(sym.MUL);}
					case -21:
						break;
					case 21:
						{return new Symbol(sym.DIV);}
					case -22:
						break;
					case 22:
						{return new Symbol(sym.ADD);}
					case -23:
						break;
					case 23:
						{return new Symbol(sym.SUB);}
					case -24:
						break;
					case 24:
						{return new Symbol(sym.MOD);}
					case -25:
						break;
					case 25:
						{return new Symbol(sym.BITAND);}
					case -26:
						break;
					case 26:
						{return new Symbol(sym.BITOR);}
					case -27:
						break;
					case 27:
						{return new Symbol(sym.BITNOT);}
					case -28:
						break;
					case 28:
						{return new Symbol(sym.EQUAL);}
					case -29:
						break;
					case 29:
						{return new Symbol(sym.GREATER);}
					case -30:
						break;
					case 30:
						{return new Symbol(sym.LESS);}
					case -31:
						break;
					case 31:
						{return new Symbol(sym.CONCAT);}
					case -32:
						break;
					case 32:
						{return new Symbol (sym.DEF);}
					case -33:
						break;
					case 33:
						{return new Symbol(sym.LET);}
					case -34:
						break;
					case 34:
						{return new Symbol(sym.CAR);}
					case -35:
						break;
					case 35:
						{return new Symbol(sym.CDR);}
					case -36:
						break;
					case 36:
						{return new Symbol(sym.BIN, yytext());}
					case -37:
						break;
					case 37:
						{return new Symbol(sym.HEX, yytext());}
					case -38:
						break;
					case 38:
						{return new Symbol(sym.GREATEREQ);}
					case -39:
						break;
					case 39:
						{return new Symbol(sym.LESSEQ);}
					case -40:
						break;
					case 40:
						{return new Symbol (sym.NOTEQ);}
					case -41:
						break;
					case 41:
						{return new Symbol (sym.ASSIGN);}
					case -42:
						break;
					case 42:
						{return new Symbol(sym.OR);}
					case -43:
						break;
					case 43:
						{return new Symbol(sym.NOT);}
					case -44:
						break;
					case 44:
						{return new Symbol(sym.THEN);}
					case -45:
						break;
					case 45:
						{return new Symbol(sym.PAIR);}
					case -46:
						break;
					case 46:
						{return new Symbol(sym.PROC);}
					case -47:
						break;
					case 47:
						{return new Symbol(sym.LIST);}
					case -48:
						break;
					case 48:
						{return new Symbol(sym.ELSE);}
					case -49:
						break;
					case 49:
						{return new Symbol(sym.EQVQ);}
					case -50:
						break;
					case 50:
						{return new Symbol(sym.CALL);}
					case -51:
						break;
					case 51:
						{return new Symbol (sym.CASE);}
					case -52:
						break;
					case 52:
						{return new Symbol(sym.AND);}
					case -53:
						break;
					case 53:
						{return new Symbol(sym.PAIRQ);}
					case -54:
						break;
					case 54:
						{return new Symbol (sym.PRINT);}
					case -55:
						break;
					case 55:
						{return new Symbol(sym.EQUALQ);}
					case -56:
						break;
					case 56:
						{return new Symbol (sym.PRINTLN);}
					case -57:
						break;
					case 57:
						{text = text.concat(yytext());}
					case -58:
						break;
					case 58:
						{yybegin(YYINITIAL); return new Symbol(sym.STRING, new String(text));}
					case -59:
						break;
					case 59:
						{text = text.concat("\n");}
					case -60:
						break;
					case 60:
						{text = text.concat("\t");}
					case -61:
						break;
					case 61:
						{text = text.concat("\f");}
					case -62:
						break;
					case 62:
						{text = text.concat("\\");}
					case -63:
						break;
					case 63:
						{}
					case -64:
						break;
					case 64:
						{}
					case -65:
						break;
					case 65:
						{yybegin (YYINITIAL);}
					case -66:
						break;
					case 66:
						{yybegin (YYINITIAL);}
					case -67:
						break;
					case 67:
						{}
					case -68:
						break;
					case 68:
						{}
					case -69:
						break;
					case 70:
						{ // VARIABLE
	       return new Symbol(sym.VARIABLE, yytext());
	       }
					case -70:
						break;
					case 71:
						{text = text.concat(yytext());}
					case -71:
						break;
					case 72:
						{}
					case -72:
						break;
					case 74:
						{ // VARIABLE
	       return new Symbol(sym.VARIABLE, yytext());
	       }
					case -73:
						break;
					case 76:
						{ // VARIABLE
	       return new Symbol(sym.VARIABLE, yytext());
	       }
					case -74:
						break;
					case 78:
						{ // VARIABLE
	       return new Symbol(sym.VARIABLE, yytext());
	       }
					case -75:
						break;
					case 80:
						{ // VARIABLE
	       return new Symbol(sym.VARIABLE, yytext());
	       }
					case -76:
						break;
					case 82:
						{ // VARIABLE
	       return new Symbol(sym.VARIABLE, yytext());
	       }
					case -77:
						break;
					case 84:
						{ // VARIABLE
	       return new Symbol(sym.VARIABLE, yytext());
	       }
					case -78:
						break;
					case 86:
						{ // VARIABLE
	       return new Symbol(sym.VARIABLE, yytext());
	       }
					case -79:
						break;
					case 88:
						{ // VARIABLE
	       return new Symbol(sym.VARIABLE, yytext());
	       }
					case -80:
						break;
					case 90:
						{ // VARIABLE
	       return new Symbol(sym.VARIABLE, yytext());
	       }
					case -81:
						break;
					case 92:
						{ // VARIABLE
	       return new Symbol(sym.VARIABLE, yytext());
	       }
					case -82:
						break;
					case 94:
						{ // VARIABLE
	       return new Symbol(sym.VARIABLE, yytext());
	       }
					case -83:
						break;
					case 96:
						{ // VARIABLE
	       return new Symbol(sym.VARIABLE, yytext());
	       }
					case -84:
						break;
					case 98:
						{ // VARIABLE
	       return new Symbol(sym.VARIABLE, yytext());
	       }
					case -85:
						break;
					case 100:
						{ // VARIABLE
	       return new Symbol(sym.VARIABLE, yytext());
	       }
					case -86:
						break;
					case 102:
						{ // VARIABLE
	       return new Symbol(sym.VARIABLE, yytext());
	       }
					case -87:
						break;
					case 104:
						{ // VARIABLE
	       return new Symbol(sym.VARIABLE, yytext());
	       }
					case -88:
						break;
					case 106:
						{ // VARIABLE
	       return new Symbol(sym.VARIABLE, yytext());
	       }
					case -89:
						break;
					case 118:
						{ // VARIABLE
	       return new Symbol(sym.VARIABLE, yytext());
	       }
					case -90:
						break;
					case 120:
						{ // VARIABLE
	       return new Symbol(sym.VARIABLE, yytext());
	       }
					case -91:
						break;
					case 121:
						{ // VARIABLE
	       return new Symbol(sym.VARIABLE, yytext());
	       }
					case -92:
						break;
					case 122:
						{ // VARIABLE
	       return new Symbol(sym.VARIABLE, yytext());
	       }
					case -93:
						break;
					case 123:
						{ // VARIABLE
	       return new Symbol(sym.VARIABLE, yytext());
	       }
					case -94:
						break;
					case 124:
						{ // VARIABLE
	       return new Symbol(sym.VARIABLE, yytext());
	       }
					case -95:
						break;
					case 125:
						{ // VARIABLE
	       return new Symbol(sym.VARIABLE, yytext());
	       }
					case -96:
						break;
					case 126:
						{ // VARIABLE
	       return new Symbol(sym.VARIABLE, yytext());
	       }
					case -97:
						break;
					case 127:
						{ // VARIABLE
	       return new Symbol(sym.VARIABLE, yytext());
	       }
					case -98:
						break;
					case 128:
						{ // VARIABLE
	       return new Symbol(sym.VARIABLE, yytext());
	       }
					case -99:
						break;
					case 129:
						{ // VARIABLE
	       return new Symbol(sym.VARIABLE, yytext());
	       }
					case -100:
						break;
					case 130:
						{ // VARIABLE
	       return new Symbol(sym.VARIABLE, yytext());
	       }
					case -101:
						break;
					case 131:
						{ // VARIABLE
	       return new Symbol(sym.VARIABLE, yytext());
	       }
					case -102:
						break;
					case 132:
						{ // VARIABLE
	       return new Symbol(sym.VARIABLE, yytext());
	       }
					case -103:
						break;
					case 133:
						{ // VARIABLE
	       return new Symbol(sym.VARIABLE, yytext());
	       }
					case -104:
						break;
					case 134:
						{ // VARIABLE
	       return new Symbol(sym.VARIABLE, yytext());
	       }
					case -105:
						break;
					case 135:
						{ // VARIABLE
	       return new Symbol(sym.VARIABLE, yytext());
	       }
					case -106:
						break;
					default:
						yy_error(YY_E_INTERNAL,false);
					case -1:
					}
					yy_initial = true;
					yy_state = yy_state_dtrans[yy_lexical_state];
					yy_next_state = YY_NO_STATE;
					yy_last_accept_state = YY_NO_STATE;
					yy_mark_start();
					yy_this_accept = yy_acpt[yy_state];
					if (YY_NOT_ACCEPT != yy_this_accept) {
						yy_last_accept_state = yy_state;
						yy_mark_end();
					}
				}
			}
		}
	}
}
