
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jan 03 13:32:40 EST 2014
//----------------------------------------------------

import java.io.*;
import java.util.*;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jan 03 13:32:40 EST 2014
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\005\004\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\006\005\000" +
    "\002\006\005\000\002\024\003\000\002\024\005\000\002" +
    "\014\003\000\002\014\007\000\002\014\006\000\002\014" +
    "\006\000\002\014\006\000\002\014\003\000\002\014\003" +
    "\000\002\014\010\000\002\014\010\000\002\014\012\000" +
    "\002\014\012\000\002\014\010\000\002\014\010\000\002" +
    "\014\006\000\002\014\010\000\002\014\010\000\002\027" +
    "\010\000\002\027\006\000\002\027\010\000\002\010\005" +
    "\000\002\010\003\000\002\026\007\000\002\037\005\000" +
    "\002\037\003\000\002\020\004\000\002\020\003\000\002" +
    "\021\005\000\002\021\005\000\002\015\006\000\002\015" +
    "\010\000\002\015\010\000\002\015\012\000\002\007\004" +
    "\000\002\007\003\000\002\012\004\000\002\011\005\000" +
    "\002\011\003\000\002\035\005\000\002\035\003\000\002" +
    "\034\004\000\002\034\003\000\002\031\005\000\002\031" +
    "\003\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\003\000" +
    "\002\032\005\000\002\032\005\000\002\032\003\000\002" +
    "\036\005\000\002\036\005\000\002\036\003\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\003" +
    "\000\002\017\005\000\002\017\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\005\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\023\010\000\002\023\006\000\002\023\006" +
    "\000\002\023\006\000\002\023\006\000\002\023\010\000" +
    "\002\023\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\352\000\104\024\025\027\053\030\027\032\051\033" +
    "\055\034\031\037\014\040\067\041\023\044\042\045\015" +
    "\046\020\047\044\050\047\052\006\053\010\056\046\057" +
    "\004\060\064\061\066\062\012\063\052\064\050\065\024" +
    "\066\041\067\021\073\026\101\016\102\045\103\036\104" +
    "\043\105\022\106\054\001\002\000\004\067\350\001\002" +
    "\000\004\002\347\001\002\000\004\067\342\001\002\000" +
    "\106\002\001\024\025\027\053\030\027\032\051\033\055" +
    "\034\031\037\014\040\067\041\023\044\042\045\015\046" +
    "\020\047\044\050\047\052\006\053\010\056\046\057\004" +
    "\060\064\061\066\062\012\063\052\064\050\065\024\066" +
    "\041\067\021\073\026\101\016\102\045\103\036\104\043" +
    "\105\022\106\054\001\002\000\004\067\334\001\002\000" +
    "\010\070\uffef\075\uffef\077\uffef\001\002\000\004\067\327" +
    "\001\002\000\010\070\ufffc\075\ufffc\077\ufffc\001\002\000" +
    "\004\073\314\001\002\000\004\067\311\001\002\000\116" +
    "\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012" +
    "\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8" +
    "\021\uffb8\022\uffb8\023\uffb8\024\uffb8\035\uffb8\036\uffb8\044" +
    "\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\052\uffb8\053\uffb8" +
    "\070\uffb8\073\uffb8\074\uffb8\075\uffb8\076\uffb8\077\uffb8\101" +
    "\uffb8\102\uffb8\103\uffb8\104\uffb8\105\uffb8\106\uffb8\001\002" +
    "\000\010\070\ufff5\075\ufff5\077\ufff5\001\002\000\004\067" +
    "\306\001\002\000\004\027\053\001\002\000\116\004\uffb3" +
    "\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\013" +
    "\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3" +
    "\022\uffb3\023\uffb3\024\uffb3\035\uffb3\036\uffb3\044\uffb3\045" +
    "\uffb3\046\uffb3\047\uffb3\050\uffb3\052\uffb3\053\uffb3\070\uffb3" +
    "\073\uffb3\074\uffb3\075\uffb3\076\uffb3\077\uffb3\101\uffb3\102" +
    "\uffb3\103\uffb3\104\uffb3\105\uffb3\106\uffb3\001\002\000\004" +
    "\067\276\001\002\000\004\067\271\001\002\000\036\044" +
    "\042\045\015\046\020\047\044\050\047\052\006\053\010" +
    "\073\026\101\016\102\076\103\036\104\043\105\022\106" +
    "\054\001\002\000\040\024\025\044\042\045\015\046\020" +
    "\047\044\050\047\052\006\053\010\073\026\101\016\102" +
    "\076\103\036\104\043\105\022\106\054\001\002\000\004" +
    "\067\261\001\002\000\116\004\uffb2\005\uffb2\006\uffb2\007" +
    "\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2" +
    "\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024" +
    "\uffb2\035\uffb2\036\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2" +
    "\050\uffb2\052\uffb2\053\uffb2\070\uffb2\073\uffb2\074\uffb2\075" +
    "\uffb2\076\uffb2\077\uffb2\101\uffb2\102\uffb2\103\uffb2\104\uffb2" +
    "\105\uffb2\106\uffb2\001\002\000\042\024\025\044\042\045" +
    "\015\046\020\047\044\050\047\052\006\053\010\067\245" +
    "\073\026\101\016\102\076\103\036\104\043\105\022\106" +
    "\054\001\002\000\010\070\ufff0\075\ufff0\077\ufff0\001\002" +
    "\000\106\002\ufffe\024\ufffe\027\ufffe\030\ufffe\032\ufffe\033" +
    "\ufffe\034\ufffe\037\ufffe\040\ufffe\041\ufffe\044\ufffe\045\ufffe" +
    "\046\ufffe\047\ufffe\050\ufffe\052\ufffe\053\ufffe\056\ufffe\057" +
    "\ufffe\060\ufffe\061\ufffe\062\ufffe\063\ufffe\064\ufffe\065\ufffe" +
    "\066\ufffe\067\ufffe\073\ufffe\101\ufffe\102\ufffe\103\ufffe\104" +
    "\ufffe\105\ufffe\106\ufffe\001\002\000\012\023\101\070\ufffb" +
    "\075\ufffb\077\ufffb\001\002\000\010\070\ufffa\075\ufffa\077" +
    "\ufffa\001\002\000\116\004\uffb6\005\uffb6\006\uffb6\007\uffb6" +
    "\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016" +
    "\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6" +
    "\035\uffb6\036\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050" +
    "\uffb6\052\uffb6\053\uffb6\070\uffb6\073\uffb6\074\uffb6\075\uffb6" +
    "\076\uffb6\077\uffb6\101\uffb6\102\uffb6\103\uffb6\104\uffb6\105" +
    "\uffb6\106\uffb6\001\002\000\116\004\uffb9\005\uffb9\006\uffb9" +
    "\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9\015" +
    "\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9" +
    "\024\uffb9\035\uffb9\036\uffb9\044\uffb9\045\uffb9\046\uffb9\047" +
    "\uffb9\050\uffb9\052\uffb9\053\uffb9\070\uffb9\073\uffb9\074\uffb9" +
    "\075\uffb9\076\uffb9\077\uffb9\101\uffb9\102\uffb9\103\uffb9\104" +
    "\uffb9\105\uffb9\106\uffb9\001\002\000\114\004\uffbf\005\uffbf" +
    "\006\115\007\116\010\114\011\uffbf\012\uffbf\014\uffbf\015" +
    "\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf" +
    "\024\uffbf\035\uffbf\036\uffbf\044\uffbf\045\uffbf\046\uffbf\047" +
    "\uffbf\050\uffbf\052\uffbf\053\uffbf\070\uffbf\073\uffbf\074\uffbf" +
    "\075\uffbf\076\uffbf\077\uffbf\101\uffbf\102\uffbf\103\uffbf\104" +
    "\uffbf\105\uffbf\106\uffbf\001\002\000\004\067\240\001\002" +
    "\000\004\067\233\001\002\000\116\004\uffb4\005\uffb4\006" +
    "\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4" +
    "\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023" +
    "\uffb4\024\uffb4\035\uffb4\036\uffb4\044\uffb4\045\uffb4\046\uffb4" +
    "\047\uffb4\050\uffb4\052\uffb4\053\uffb4\070\uffb4\073\uffb4\074" +
    "\uffb4\075\uffb4\076\uffb4\077\uffb4\101\uffb4\102\uffb4\103\uffb4" +
    "\104\uffb4\105\uffb4\106\uffb4\001\002\000\004\067\230\001" +
    "\002\000\054\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7" +
    "\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017" +
    "\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\026\221\067\220" +
    "\070\uffb7\075\uffb7\077\uffb7\001\002\000\004\067\213\001" +
    "\002\000\004\067\204\001\002\000\004\067\201\001\002" +
    "\000\004\067\172\001\002\000\004\067\165\001\002\000" +
    "\004\067\156\001\002\000\116\004\uffb1\005\uffb1\006\uffb1" +
    "\007\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015" +
    "\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1" +
    "\024\uffb1\035\uffb1\036\uffb1\044\uffb1\045\uffb1\046\uffb1\047" +
    "\uffb1\050\uffb1\052\uffb1\053\uffb1\070\uffb1\073\uffb1\074\uffb1" +
    "\075\uffb1\076\uffb1\077\uffb1\101\uffb1\102\uffb1\103\uffb1\104" +
    "\uffb1\105\uffb1\106\uffb1\001\002\000\004\102\154\001\002" +
    "\000\062\022\103\023\uffd1\024\uffd1\035\uffd1\036\uffd1\044" +
    "\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\052\uffd1\053\uffd1" +
    "\070\uffd1\073\uffd1\074\uffd1\075\uffd1\076\uffd1\077\uffd1\101" +
    "\uffd1\102\uffd1\103\uffd1\104\uffd1\105\uffd1\106\uffd1\001\002" +
    "\000\062\022\uffcf\023\uffcf\024\uffcf\035\uffcf\036\uffcf\044" +
    "\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\052\uffcf\053\uffcf" +
    "\070\uffcf\073\uffcf\074\uffcf\075\uffcf\076\uffcf\077\uffcf\101" +
    "\uffcf\102\uffcf\103\uffcf\104\uffcf\105\uffcf\106\uffcf\001\002" +
    "\000\116\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb\011" +
    "\uffbb\012\uffbb\013\120\014\uffbb\015\uffbb\016\uffbb\017\uffbb" +
    "\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\035\uffbb\036" +
    "\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\052\uffbb" +
    "\053\uffbb\070\uffbb\073\uffbb\074\uffbb\075\uffbb\076\uffbb\077" +
    "\uffbb\101\uffbb\102\uffbb\103\uffbb\104\uffbb\105\uffbb\106\uffbb" +
    "\001\002\000\062\022\uffcd\023\uffcd\024\uffcd\035\uffcd\036" +
    "\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\052\uffcd" +
    "\053\uffcd\070\uffcd\073\uffcd\074\uffcd\075\uffcd\076\uffcd\077" +
    "\uffcd\101\uffcd\102\uffcd\103\uffcd\104\uffcd\105\uffcd\106\uffcd" +
    "\001\002\000\064\021\152\022\uffcb\023\uffcb\024\uffcb\035" +
    "\uffcb\036\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb" +
    "\052\uffcb\053\uffcb\070\uffcb\073\uffcb\074\uffcb\075\uffcb\076" +
    "\uffcb\077\uffcb\101\uffcb\102\uffcb\103\uffcb\104\uffcb\105\uffcb" +
    "\106\uffcb\001\002\000\102\011\135\012\140\014\141\015" +
    "\137\016\142\017\136\020\134\021\uffc5\022\uffc5\023\uffc5" +
    "\024\uffc5\035\uffc5\036\uffc5\044\uffc5\045\uffc5\046\uffc5\047" +
    "\uffc5\050\uffc5\052\uffc5\053\uffc5\070\uffc5\073\uffc5\074\uffc5" +
    "\075\uffc5\076\uffc5\077\uffc5\101\uffc5\102\uffc5\103\uffc5\104" +
    "\uffc5\105\uffc5\106\uffc5\001\002\000\004\067\125\001\002" +
    "\000\106\004\111\005\112\011\uffc2\012\uffc2\014\uffc2\015" +
    "\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2" +
    "\024\uffc2\035\uffc2\036\uffc2\044\uffc2\045\uffc2\046\uffc2\047" +
    "\uffc2\050\uffc2\052\uffc2\053\uffc2\070\uffc2\073\uffc2\074\uffc2" +
    "\075\uffc2\076\uffc2\077\uffc2\101\uffc2\102\uffc2\103\uffc2\104" +
    "\uffc2\105\uffc2\106\uffc2\001\002\000\004\067\075\001\002" +
    "\000\004\067\072\001\002\000\004\075\071\001\002\000" +
    "\106\002\ufffd\024\ufffd\027\ufffd\030\ufffd\032\ufffd\033\ufffd" +
    "\034\ufffd\037\ufffd\040\ufffd\041\ufffd\044\ufffd\045\ufffd\046" +
    "\ufffd\047\ufffd\050\ufffd\052\ufffd\053\ufffd\056\ufffd\057\ufffd" +
    "\060\ufffd\061\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd\066" +
    "\ufffd\067\ufffd\073\ufffd\101\ufffd\102\ufffd\103\ufffd\104\ufffd" +
    "\105\ufffd\106\ufffd\001\002\000\104\024\025\027\053\030" +
    "\027\032\051\033\055\034\031\037\014\040\067\041\023" +
    "\044\042\045\015\046\020\047\044\050\047\052\006\053" +
    "\010\056\046\057\004\060\064\061\066\062\012\063\052" +
    "\064\050\065\024\066\041\067\021\073\026\101\016\102" +
    "\045\103\036\104\043\105\022\106\054\001\002\000\004" +
    "\070\074\001\002\000\010\070\ufff2\075\ufff2\077\ufff2\001" +
    "\002\000\040\024\025\044\042\045\015\046\020\047\044" +
    "\050\047\052\006\053\010\073\026\101\016\102\076\103" +
    "\036\104\043\105\022\106\054\001\002\000\116\004\uffb7" +
    "\005\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013" +
    "\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7" +
    "\022\uffb7\023\uffb7\024\uffb7\035\uffb7\036\uffb7\044\uffb7\045" +
    "\uffb7\046\uffb7\047\uffb7\050\uffb7\052\uffb7\053\uffb7\070\uffb7" +
    "\073\uffb7\074\uffb7\075\uffb7\076\uffb7\077\uffb7\101\uffb7\102" +
    "\uffb7\103\uffb7\104\uffb7\105\uffb7\106\uffb7\001\002\000\006" +
    "\023\101\077\100\001\002\000\040\024\025\044\042\045" +
    "\015\046\020\047\044\050\047\052\006\053\010\073\026" +
    "\101\016\102\076\103\036\104\043\105\022\106\054\001" +
    "\002\000\040\024\025\044\042\045\015\046\020\047\044" +
    "\050\047\052\006\053\010\073\026\101\016\102\076\103" +
    "\036\104\043\105\022\106\054\001\002\000\062\022\103" +
    "\023\uffd2\024\uffd2\035\uffd2\036\uffd2\044\uffd2\045\uffd2\046" +
    "\uffd2\047\uffd2\050\uffd2\052\uffd2\053\uffd2\070\uffd2\073\uffd2" +
    "\074\uffd2\075\uffd2\076\uffd2\077\uffd2\101\uffd2\102\uffd2\103" +
    "\uffd2\104\uffd2\105\uffd2\106\uffd2\001\002\000\040\024\025" +
    "\044\042\045\015\046\020\047\044\050\047\052\006\053" +
    "\010\073\026\101\016\102\076\103\036\104\043\105\022" +
    "\106\054\001\002\000\062\022\uffd0\023\uffd0\024\uffd0\035" +
    "\uffd0\036\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0" +
    "\052\uffd0\053\uffd0\070\uffd0\073\uffd0\074\uffd0\075\uffd0\076" +
    "\uffd0\077\uffd0\101\uffd0\102\uffd0\103\uffd0\104\uffd0\105\uffd0" +
    "\106\uffd0\001\002\000\006\023\101\077\106\001\002\000" +
    "\040\024\025\044\042\045\015\046\020\047\044\050\047" +
    "\052\006\053\010\073\026\101\016\102\076\103\036\104" +
    "\043\105\022\106\054\001\002\000\006\023\101\070\110" +
    "\001\002\000\010\070\uffeb\075\uffeb\077\uffeb\001\002\000" +
    "\036\044\042\045\015\046\020\047\044\050\047\052\006" +
    "\053\010\073\026\101\016\102\076\103\036\104\043\105" +
    "\022\106\054\001\002\000\036\044\042\045\015\046\020" +
    "\047\044\050\047\052\006\053\010\073\026\101\016\102" +
    "\076\103\036\104\043\105\022\106\054\001\002\000\114" +
    "\004\uffc0\005\uffc0\006\115\007\116\010\114\011\uffc0\012" +
    "\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0" +
    "\022\uffc0\023\uffc0\024\uffc0\035\uffc0\036\uffc0\044\uffc0\045" +
    "\uffc0\046\uffc0\047\uffc0\050\uffc0\052\uffc0\053\uffc0\070\uffc0" +
    "\073\uffc0\074\uffc0\075\uffc0\076\uffc0\077\uffc0\101\uffc0\102" +
    "\uffc0\103\uffc0\104\uffc0\105\uffc0\106\uffc0\001\002\000\036" +
    "\044\042\045\015\046\020\047\044\050\047\052\006\053" +
    "\010\073\026\101\016\102\076\103\036\104\043\105\022" +
    "\106\054\001\002\000\036\044\042\045\015\046\020\047" +
    "\044\050\047\052\006\053\010\073\026\101\016\102\076" +
    "\103\036\104\043\105\022\106\054\001\002\000\036\044" +
    "\042\045\015\046\020\047\044\050\047\052\006\053\010" +
    "\073\026\101\016\102\076\103\036\104\043\105\022\106" +
    "\054\001\002\000\116\004\uffbd\005\uffbd\006\uffbd\007\uffbd" +
    "\010\uffbd\011\uffbd\012\uffbd\013\120\014\uffbd\015\uffbd\016" +
    "\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd" +
    "\035\uffbd\036\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050" +
    "\uffbd\052\uffbd\053\uffbd\070\uffbd\073\uffbd\074\uffbd\075\uffbd" +
    "\076\uffbd\077\uffbd\101\uffbd\102\uffbd\103\uffbd\104\uffbd\105" +
    "\uffbd\106\uffbd\001\002\000\036\044\042\045\015\046\020" +
    "\047\044\050\047\052\006\053\010\073\026\101\016\102" +
    "\076\103\036\104\043\105\022\106\054\001\002\000\116" +
    "\004\uffba\005\uffba\006\uffba\007\uffba\010\uffba\011\uffba\012" +
    "\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba" +
    "\021\uffba\022\uffba\023\uffba\024\uffba\035\uffba\036\uffba\044" +
    "\uffba\045\uffba\046\uffba\047\uffba\050\uffba\052\uffba\053\uffba" +
    "\070\uffba\073\uffba\074\uffba\075\uffba\076\uffba\077\uffba\101" +
    "\uffba\102\uffba\103\uffba\104\uffba\105\uffba\106\uffba\001\002" +
    "\000\116\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011" +
    "\uffbe\012\uffbe\013\120\014\uffbe\015\uffbe\016\uffbe\017\uffbe" +
    "\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\035\uffbe\036" +
    "\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\052\uffbe" +
    "\053\uffbe\070\uffbe\073\uffbe\074\uffbe\075\uffbe\076\uffbe\077" +
    "\uffbe\101\uffbe\102\uffbe\103\uffbe\104\uffbe\105\uffbe\106\uffbe" +
    "\001\002\000\116\004\uffbc\005\uffbc\006\uffbc\007\uffbc\010" +
    "\uffbc\011\uffbc\012\uffbc\013\120\014\uffbc\015\uffbc\016\uffbc" +
    "\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\035" +
    "\uffbc\036\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc" +
    "\052\uffbc\053\uffbc\070\uffbc\073\uffbc\074\uffbc\075\uffbc\076" +
    "\uffbc\077\uffbc\101\uffbc\102\uffbc\103\uffbc\104\uffbc\105\uffbc" +
    "\106\uffbc\001\002\000\114\004\uffc1\005\uffc1\006\115\007" +
    "\116\010\114\011\uffc1\012\uffc1\014\uffc1\015\uffc1\016\uffc1" +
    "\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\035" +
    "\uffc1\036\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1" +
    "\052\uffc1\053\uffc1\070\uffc1\073\uffc1\074\uffc1\075\uffc1\076" +
    "\uffc1\077\uffc1\101\uffc1\102\uffc1\103\uffc1\104\uffc1\105\uffc1" +
    "\106\uffc1\001\002\000\040\024\025\044\042\045\015\046" +
    "\020\047\044\050\047\052\006\053\010\073\026\101\016" +
    "\102\076\103\036\104\043\105\022\106\054\001\002\000" +
    "\006\023\101\077\127\001\002\000\040\024\025\044\042" +
    "\045\015\046\020\047\044\050\047\052\006\053\010\073" +
    "\026\101\016\102\076\103\036\104\043\105\022\106\054" +
    "\001\002\000\006\023\101\077\131\001\002\000\040\024" +
    "\025\044\042\045\015\046\020\047\044\050\047\052\006" +
    "\053\010\073\026\101\016\102\076\103\036\104\043\105" +
    "\022\106\054\001\002\000\006\023\101\070\133\001\002" +
    "\000\010\070\uffec\075\uffec\077\uffec\001\002\000\036\044" +
    "\042\045\015\046\020\047\044\050\047\052\006\053\010" +
    "\073\026\101\016\102\076\103\036\104\043\105\022\106" +
    "\054\001\002\000\036\044\042\045\015\046\020\047\044" +
    "\050\047\052\006\053\010\073\026\101\016\102\076\103" +
    "\036\104\043\105\022\106\054\001\002\000\036\044\042" +
    "\045\015\046\020\047\044\050\047\052\006\053\010\073" +
    "\026\101\016\102\076\103\036\104\043\105\022\106\054" +
    "\001\002\000\036\044\042\045\015\046\020\047\044\050" +
    "\047\052\006\053\010\073\026\101\016\102\076\103\036" +
    "\104\043\105\022\106\054\001\002\000\036\044\042\045" +
    "\015\046\020\047\044\050\047\052\006\053\010\073\026" +
    "\101\016\102\076\103\036\104\043\105\022\106\054\001" +
    "\002\000\036\044\042\045\015\046\020\047\044\050\047" +
    "\052\006\053\010\073\026\101\016\102\076\103\036\104" +
    "\043\105\022\106\054\001\002\000\036\044\042\045\015" +
    "\046\020\047\044\050\047\052\006\053\010\073\026\101" +
    "\016\102\076\103\036\104\043\105\022\106\054\001\002" +
    "\000\070\011\135\012\140\021\uffc8\022\uffc8\023\uffc8\024" +
    "\uffc8\035\uffc8\036\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8" +
    "\050\uffc8\052\uffc8\053\uffc8\070\uffc8\073\uffc8\074\uffc8\075" +
    "\uffc8\076\uffc8\077\uffc8\101\uffc8\102\uffc8\103\uffc8\104\uffc8" +
    "\105\uffc8\106\uffc8\001\002\000\070\011\135\012\140\021" +
    "\uffca\022\uffca\023\uffca\024\uffca\035\uffca\036\uffca\044\uffca" +
    "\045\uffca\046\uffca\047\uffca\050\uffca\052\uffca\053\uffca\070" +
    "\uffca\073\uffca\074\uffca\075\uffca\076\uffca\077\uffca\101\uffca" +
    "\102\uffca\103\uffca\104\uffca\105\uffca\106\uffca\001\002\000" +
    "\106\004\111\005\112\011\uffc3\012\uffc3\014\uffc3\015\uffc3" +
    "\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024" +
    "\uffc3\035\uffc3\036\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3" +
    "\050\uffc3\052\uffc3\053\uffc3\070\uffc3\073\uffc3\074\uffc3\075" +
    "\uffc3\076\uffc3\077\uffc3\101\uffc3\102\uffc3\103\uffc3\104\uffc3" +
    "\105\uffc3\106\uffc3\001\002\000\070\011\135\012\140\021" +
    "\uffc9\022\uffc9\023\uffc9\024\uffc9\035\uffc9\036\uffc9\044\uffc9" +
    "\045\uffc9\046\uffc9\047\uffc9\050\uffc9\052\uffc9\053\uffc9\070" +
    "\uffc9\073\uffc9\074\uffc9\075\uffc9\076\uffc9\077\uffc9\101\uffc9" +
    "\102\uffc9\103\uffc9\104\uffc9\105\uffc9\106\uffc9\001\002\000" +
    "\070\011\135\012\140\021\uffc6\022\uffc6\023\uffc6\024\uffc6" +
    "\035\uffc6\036\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050" +
    "\uffc6\052\uffc6\053\uffc6\070\uffc6\073\uffc6\074\uffc6\075\uffc6" +
    "\076\uffc6\077\uffc6\101\uffc6\102\uffc6\103\uffc6\104\uffc6\105" +
    "\uffc6\106\uffc6\001\002\000\106\004\111\005\112\011\uffc4" +
    "\012\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021" +
    "\uffc4\022\uffc4\023\uffc4\024\uffc4\035\uffc4\036\uffc4\044\uffc4" +
    "\045\uffc4\046\uffc4\047\uffc4\050\uffc4\052\uffc4\053\uffc4\070" +
    "\uffc4\073\uffc4\074\uffc4\075\uffc4\076\uffc4\077\uffc4\101\uffc4" +
    "\102\uffc4\103\uffc4\104\uffc4\105\uffc4\106\uffc4\001\002\000" +
    "\070\011\135\012\140\021\uffc7\022\uffc7\023\uffc7\024\uffc7" +
    "\035\uffc7\036\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050" +
    "\uffc7\052\uffc7\053\uffc7\070\uffc7\073\uffc7\074\uffc7\075\uffc7" +
    "\076\uffc7\077\uffc7\101\uffc7\102\uffc7\103\uffc7\104\uffc7\105" +
    "\uffc7\106\uffc7\001\002\000\036\044\042\045\015\046\020" +
    "\047\044\050\047\052\006\053\010\073\026\101\016\102" +
    "\076\103\036\104\043\105\022\106\054\001\002\000\062" +
    "\022\uffcc\023\uffcc\024\uffcc\035\uffcc\036\uffcc\044\uffcc\045" +
    "\uffcc\046\uffcc\047\uffcc\050\uffcc\052\uffcc\053\uffcc\070\uffcc" +
    "\073\uffcc\074\uffcc\075\uffcc\076\uffcc\077\uffcc\101\uffcc\102" +
    "\uffcc\103\uffcc\104\uffcc\105\uffcc\106\uffcc\001\002\000\104" +
    "\024\025\027\053\030\027\032\051\033\055\034\031\037" +
    "\014\040\067\041\023\044\042\045\015\046\020\047\044" +
    "\050\047\052\006\053\010\056\046\057\004\060\064\061" +
    "\066\062\012\063\052\064\050\065\024\066\041\067\021" +
    "\073\026\101\016\102\045\103\036\104\043\105\022\106" +
    "\054\001\002\000\010\070\ufff9\075\ufff9\077\ufff9\001\002" +
    "\000\004\102\160\001\002\000\006\070\162\077\161\001" +
    "\002\000\006\070\uffde\077\uffde\001\002\000\004\102\164" +
    "\001\002\000\104\024\025\027\053\030\027\032\051\033" +
    "\055\034\031\037\014\040\067\041\023\044\042\045\015" +
    "\046\020\047\044\050\047\052\006\053\010\056\046\057" +
    "\004\060\064\061\066\062\012\063\052\064\050\065\024" +
    "\066\041\067\021\073\026\101\016\102\045\103\036\104" +
    "\043\105\022\106\054\001\002\000\010\070\uffe0\075\uffe0" +
    "\077\uffe0\001\002\000\006\070\uffdf\077\uffdf\001\002\000" +
    "\040\024\025\044\042\045\015\046\020\047\044\050\047" +
    "\052\006\053\010\073\026\101\016\102\076\103\036\104" +
    "\043\105\022\106\054\001\002\000\006\023\101\077\167" +
    "\001\002\000\040\024\025\044\042\045\015\046\020\047" +
    "\044\050\047\052\006\053\010\073\026\101\016\102\076" +
    "\103\036\104\043\105\022\106\054\001\002\000\006\023" +
    "\101\070\171\001\002\000\010\070\uffe9\075\uffe9\077\uffe9" +
    "\001\002\000\002\001\002\000\006\070\176\077\175\001" +
    "\002\000\006\070\ufff7\077\ufff7\001\002\000\002\001\002" +
    "\000\104\024\025\027\053\030\027\032\051\033\055\034" +
    "\031\037\014\040\067\041\023\044\042\045\015\046\020" +
    "\047\044\050\047\052\006\053\010\056\046\057\004\060" +
    "\064\061\066\062\012\063\052\064\050\065\024\066\041" +
    "\067\021\073\026\101\016\102\045\103\036\104\043\105" +
    "\022\106\054\001\002\000\010\070\ufff4\075\ufff4\077\ufff4" +
    "\001\002\000\006\070\ufff6\077\ufff6\001\002\000\040\024" +
    "\025\044\042\045\015\046\020\047\044\050\047\052\006" +
    "\053\010\073\026\101\016\102\076\103\036\104\043\105" +
    "\022\106\054\001\002\000\006\023\101\070\203\001\002" +
    "\000\010\070\uffe8\075\uffe8\077\uffe8\001\002\000\040\024" +
    "\025\044\042\045\015\046\020\047\044\050\047\052\006" +
    "\053\010\073\026\101\016\102\076\103\036\104\043\105" +
    "\022\106\054\001\002\000\042\024\025\044\042\045\015" +
    "\046\020\047\044\050\047\052\006\053\010\070\211\073" +
    "\026\101\016\102\076\103\036\104\043\105\022\106\054" +
    "\001\002\000\006\023\101\077\210\001\002\000\044\024" +
    "\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\052\uffd4" +
    "\053\uffd4\070\uffd4\073\uffd4\074\uffd4\101\uffd4\102\uffd4\103" +
    "\uffd4\104\uffd4\105\uffd4\106\uffd4\001\002\000\044\024\uffd3" +
    "\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\052\uffd3\053" +
    "\uffd3\070\uffd3\073\uffd3\074\uffd3\101\uffd3\102\uffd3\103\uffd3" +
    "\104\uffd3\105\uffd3\106\uffd3\001\002\000\116\004\uffad\005" +
    "\uffad\006\uffad\007\uffad\010\uffad\011\uffad\012\uffad\013\uffad" +
    "\014\uffad\015\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022" +
    "\uffad\023\uffad\024\uffad\035\uffad\036\uffad\044\uffad\045\uffad" +
    "\046\uffad\047\uffad\050\uffad\052\uffad\053\uffad\070\uffad\073" +
    "\uffad\074\uffad\075\uffad\076\uffad\077\uffad\101\uffad\102\uffad" +
    "\103\uffad\104\uffad\105\uffad\106\uffad\001\002\000\044\024" +
    "\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\052\uffd5" +
    "\053\uffd5\070\uffd5\073\uffd5\074\uffd5\101\uffd5\102\uffd5\103" +
    "\uffd5\104\uffd5\105\uffd5\106\uffd5\001\002\000\040\024\025" +
    "\044\042\045\015\046\020\047\044\050\047\052\006\053" +
    "\010\073\026\101\016\102\076\103\036\104\043\105\022" +
    "\106\054\001\002\000\006\023\101\077\215\001\002\000" +
    "\040\024\025\044\042\045\015\046\020\047\044\050\047" +
    "\052\006\053\010\073\026\101\016\102\076\103\036\104" +
    "\043\105\022\106\054\001\002\000\006\023\101\070\217" +
    "\001\002\000\010\070\uffee\075\uffee\077\uffee\001\002\000" +
    "\104\024\025\027\053\030\027\032\051\033\055\034\031" +
    "\037\014\040\067\041\023\044\042\045\015\046\020\047" +
    "\044\050\047\052\006\053\010\056\046\057\004\060\064" +
    "\061\066\062\012\063\052\064\050\065\024\066\041\067" +
    "\021\073\026\101\016\102\045\103\036\104\043\105\022" +
    "\106\054\001\002\000\040\024\025\044\042\045\015\046" +
    "\020\047\044\050\047\052\006\053\010\073\026\101\016" +
    "\102\076\103\036\104\043\105\022\106\054\001\002\000" +
    "\012\023\101\070\ufff8\075\ufff8\077\ufff8\001\002\000\006" +
    "\070\226\077\225\001\002\000\006\070\uffe1\077\uffe1\001" +
    "\002\000\104\024\025\027\053\030\027\032\051\033\055" +
    "\034\031\037\014\040\067\041\023\044\042\045\015\046" +
    "\020\047\044\050\047\052\006\053\010\056\046\057\004" +
    "\060\064\061\066\062\012\063\052\064\050\065\024\066" +
    "\041\067\021\073\026\101\016\102\045\103\036\104\043" +
    "\105\022\106\054\001\002\000\010\070\uffe4\075\uffe4\077" +
    "\uffe4\001\002\000\006\070\uffe2\077\uffe2\001\002\000\040" +
    "\024\025\044\042\045\015\046\020\047\044\050\047\052" +
    "\006\053\010\073\026\101\016\102\076\103\036\104\043" +
    "\105\022\106\054\001\002\000\006\023\101\070\232\001" +
    "\002\000\116\004\uffac\005\uffac\006\uffac\007\uffac\010\uffac" +
    "\011\uffac\012\uffac\013\uffac\014\uffac\015\uffac\016\uffac\017" +
    "\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac\035\uffac" +
    "\036\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac\052" +
    "\uffac\053\uffac\070\uffac\073\uffac\074\uffac\075\uffac\076\uffac" +
    "\077\uffac\101\uffac\102\uffac\103\uffac\104\uffac\105\uffac\106" +
    "\uffac\001\002\000\040\024\025\044\042\045\015\046\020" +
    "\047\044\050\047\052\006\053\010\073\026\101\016\102" +
    "\076\103\036\104\043\105\022\106\054\001\002\000\006" +
    "\023\101\077\235\001\002\000\040\024\025\044\042\045" +
    "\015\046\020\047\044\050\047\052\006\053\010\073\026" +
    "\101\016\102\076\103\036\104\043\105\022\106\054\001" +
    "\002\000\006\023\101\070\237\001\002\000\116\004\uffb0" +
    "\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013" +
    "\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0" +
    "\022\uffb0\023\uffb0\024\uffb0\035\uffb0\036\uffb0\044\uffb0\045" +
    "\uffb0\046\uffb0\047\uffb0\050\uffb0\052\uffb0\053\uffb0\070\uffb0" +
    "\073\uffb0\074\uffb0\075\uffb0\076\uffb0\077\uffb0\101\uffb0\102" +
    "\uffb0\103\uffb0\104\uffb0\105\uffb0\106\uffb0\001\002\000\040" +
    "\024\025\044\042\045\015\046\020\047\044\050\047\052" +
    "\006\053\010\073\026\101\016\102\076\103\036\104\043" +
    "\105\022\106\054\001\002\000\006\023\101\077\242\001" +
    "\002\000\040\024\025\044\042\045\015\046\020\047\044" +
    "\050\047\052\006\053\010\073\026\101\016\102\076\103" +
    "\036\104\043\105\022\106\054\001\002\000\006\023\101" +
    "\070\244\001\002\000\010\070\uffe6\075\uffe6\077\uffe6\001" +
    "\002\000\040\024\025\044\042\045\015\046\020\047\044" +
    "\050\047\052\006\053\010\073\026\101\016\102\076\103" +
    "\036\104\043\105\022\106\054\001\002\000\006\023\101" +
    "\035\247\001\002\000\040\024\025\044\042\045\015\046" +
    "\020\047\044\050\047\052\006\053\010\073\026\101\016" +
    "\102\076\103\036\104\043\105\022\106\054\001\002\000" +
    "\014\023\101\036\251\070\uffd9\075\uffd9\077\uffd9\001\002" +
    "\000\040\024\025\044\042\045\015\046\020\047\044\050" +
    "\047\052\006\053\010\073\026\101\016\102\076\103\036" +
    "\104\043\105\022\106\054\001\002\000\012\023\101\070" +
    "\uffd8\075\uffd8\077\uffd8\001\002\000\006\023\101\070\254" +
    "\001\002\000\004\035\255\001\002\000\040\024\025\044" +
    "\042\045\015\046\020\047\044\050\047\052\006\053\010" +
    "\073\026\101\016\102\076\103\036\104\043\105\022\106" +
    "\054\001\002\000\014\023\101\036\257\070\uffd7\075\uffd7" +
    "\077\uffd7\001\002\000\040\024\025\044\042\045\015\046" +
    "\020\047\044\050\047\052\006\053\010\073\026\101\016" +
    "\102\076\103\036\104\043\105\022\106\054\001\002\000" +
    "\012\023\101\070\uffd6\075\uffd6\077\uffd6\001\002\000\040" +
    "\024\025\044\042\045\015\046\020\047\044\050\047\052" +
    "\006\053\010\073\026\101\016\102\076\103\036\104\043" +
    "\105\022\106\054\001\002\000\006\023\101\077\263\001" +
    "\002\000\104\024\025\027\053\030\027\032\051\033\055" +
    "\034\031\037\014\040\067\041\023\044\042\045\015\046" +
    "\020\047\044\050\047\052\006\053\010\056\046\057\004" +
    "\060\064\061\066\062\012\063\052\064\050\065\024\066" +
    "\041\067\021\073\026\101\016\102\045\103\036\104\043" +
    "\105\022\106\054\001\002\000\006\070\265\077\225\001" +
    "\002\000\010\070\uffe3\075\uffe3\077\uffe3\001\002\000\042" +
    "\024\025\044\042\045\015\046\020\047\044\050\047\052" +
    "\006\053\010\073\026\074\267\101\016\102\076\103\036" +
    "\104\043\105\022\106\054\001\002\000\116\004\uffb5\005" +
    "\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5" +
    "\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022" +
    "\uffb5\023\uffb5\024\uffb5\035\uffb5\036\uffb5\044\uffb5\045\uffb5" +
    "\046\uffb5\047\uffb5\050\uffb5\052\uffb5\053\uffb5\070\uffb5\073" +
    "\uffb5\074\uffb5\075\uffb5\076\uffb5\077\uffb5\101\uffb5\102\uffb5" +
    "\103\uffb5\104\uffb5\105\uffb5\106\uffb5\001\002\000\062\022" +
    "\uffce\023\uffce\024\uffce\035\uffce\036\uffce\044\uffce\045\uffce" +
    "\046\uffce\047\uffce\050\uffce\052\uffce\053\uffce\070\uffce\073" +
    "\uffce\074\uffce\075\uffce\076\uffce\077\uffce\101\uffce\102\uffce" +
    "\103\uffce\104\uffce\105\uffce\106\uffce\001\002\000\040\024" +
    "\025\044\042\045\015\046\020\047\044\050\047\052\006" +
    "\053\010\073\026\101\016\102\076\103\036\104\043\105" +
    "\022\106\054\001\002\000\006\023\101\077\273\001\002" +
    "\000\040\024\025\044\042\045\015\046\020\047\044\050" +
    "\047\052\006\053\010\073\026\101\016\102\076\103\036" +
    "\104\043\105\022\106\054\001\002\000\006\023\101\070" +
    "\275\001\002\000\010\070\uffe7\075\uffe7\077\uffe7\001\002" +
    "\000\104\024\025\027\053\030\027\032\051\033\055\034" +
    "\031\037\014\040\067\041\023\044\042\045\015\046\020" +
    "\047\044\050\047\052\006\053\010\056\046\057\004\060" +
    "\064\061\066\062\012\063\052\064\050\065\024\066\041" +
    "\067\021\073\026\101\016\102\045\103\036\104\043\105" +
    "\022\106\054\001\002\000\004\070\300\001\002\000\010" +
    "\070\ufff1\075\ufff1\077\ufff1\001\002\000\004\070\302\001" +
    "\002\000\004\067\303\001\002\000\104\024\025\027\053" +
    "\030\027\032\051\033\055\034\031\037\014\040\067\041" +
    "\023\044\042\045\015\046\020\047\044\050\047\052\006" +
    "\053\010\056\046\057\004\060\064\061\066\062\012\063" +
    "\052\064\050\065\024\066\041\067\021\073\026\101\016" +
    "\102\045\103\036\104\043\105\022\106\054\001\002\000" +
    "\006\070\305\077\225\001\002\000\010\070\uffe5\075\uffe5" +
    "\077\uffe5\001\002\000\040\024\025\044\042\045\015\046" +
    "\020\047\044\050\047\052\006\053\010\073\026\101\016" +
    "\102\076\103\036\104\043\105\022\106\054\001\002\000" +
    "\006\023\101\070\310\001\002\000\116\004\uffae\005\uffae" +
    "\006\uffae\007\uffae\010\uffae\011\uffae\012\uffae\013\uffae\014" +
    "\uffae\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae\022\uffae" +
    "\023\uffae\024\uffae\035\uffae\036\uffae\044\uffae\045\uffae\046" +
    "\uffae\047\uffae\050\uffae\052\uffae\053\uffae\070\uffae\073\uffae" +
    "\074\uffae\075\uffae\076\uffae\077\uffae\101\uffae\102\uffae\103" +
    "\uffae\104\uffae\105\uffae\106\uffae\001\002\000\040\024\025" +
    "\044\042\045\015\046\020\047\044\050\047\052\006\053" +
    "\010\073\026\101\016\102\076\103\036\104\043\105\022" +
    "\106\054\001\002\000\006\023\101\070\313\001\002\000" +
    "\116\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf" +
    "\012\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020" +
    "\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\035\uffaf\036\uffaf" +
    "\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\052\uffaf\053" +
    "\uffaf\070\uffaf\073\uffaf\074\uffaf\075\uffaf\076\uffaf\077\uffaf" +
    "\101\uffaf\102\uffaf\103\uffaf\104\uffaf\105\uffaf\106\uffaf\001" +
    "\002\000\042\024\025\036\315\044\042\045\015\046\020" +
    "\047\044\050\047\052\006\053\010\073\026\101\016\102" +
    "\076\103\036\104\043\105\022\106\054\001\002\000\004" +
    "\076\325\001\002\000\044\024\uffdc\036\uffdc\044\uffdc\045" +
    "\uffdc\046\uffdc\047\uffdc\050\uffdc\052\uffdc\053\uffdc\073\uffdc" +
    "\074\uffdc\101\uffdc\102\uffdc\103\uffdc\104\uffdc\105\uffdc\106" +
    "\uffdc\001\002\000\006\023\101\076\323\001\002\000\044" +
    "\024\025\036\315\044\042\045\015\046\020\047\044\050" +
    "\047\052\006\053\010\073\026\074\322\101\016\102\076" +
    "\103\036\104\043\105\022\106\054\001\002\000\044\024" +
    "\uffdd\036\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd" +
    "\052\uffdd\053\uffdd\073\uffdd\074\uffdd\101\uffdd\102\uffdd\103" +
    "\uffdd\104\uffdd\105\uffdd\106\uffdd\001\002\000\010\070\ufff3" +
    "\075\ufff3\077\ufff3\001\002\000\040\024\025\044\042\045" +
    "\015\046\020\047\044\050\047\052\006\053\010\073\026" +
    "\101\016\102\076\103\036\104\043\105\022\106\054\001" +
    "\002\000\046\023\101\024\uffdb\036\uffdb\044\uffdb\045\uffdb" +
    "\046\uffdb\047\uffdb\050\uffdb\052\uffdb\053\uffdb\073\uffdb\074" +
    "\uffdb\101\uffdb\102\uffdb\103\uffdb\104\uffdb\105\uffdb\106\uffdb" +
    "\001\002\000\040\024\025\044\042\045\015\046\020\047" +
    "\044\050\047\052\006\053\010\073\026\101\016\102\076" +
    "\103\036\104\043\105\022\106\054\001\002\000\046\023" +
    "\101\024\uffda\036\uffda\044\uffda\045\uffda\046\uffda\047\uffda" +
    "\050\uffda\052\uffda\053\uffda\073\uffda\074\uffda\101\uffda\102" +
    "\uffda\103\uffda\104\uffda\105\uffda\106\uffda\001\002\000\040" +
    "\024\025\044\042\045\015\046\020\047\044\050\047\052" +
    "\006\053\010\073\026\101\016\102\076\103\036\104\043" +
    "\105\022\106\054\001\002\000\006\023\101\077\331\001" +
    "\002\000\040\024\025\044\042\045\015\046\020\047\044" +
    "\050\047\052\006\053\010\073\026\101\016\102\076\103" +
    "\036\104\043\105\022\106\054\001\002\000\006\023\101" +
    "\070\333\001\002\000\010\070\uffea\075\uffea\077\uffea\001" +
    "\002\000\040\024\025\044\042\045\015\046\020\047\044" +
    "\050\047\052\006\053\010\073\026\101\016\102\076\103" +
    "\036\104\043\105\022\106\054\001\002\000\006\023\101" +
    "\077\336\001\002\000\040\024\025\044\042\045\015\046" +
    "\020\047\044\050\047\052\006\053\010\073\026\101\016" +
    "\102\076\103\036\104\043\105\022\106\054\001\002\000" +
    "\006\023\101\070\340\001\002\000\116\004\uffaa\005\uffaa" +
    "\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014" +
    "\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa" +
    "\023\uffaa\024\uffaa\035\uffaa\036\uffaa\044\uffaa\045\uffaa\046" +
    "\uffaa\047\uffaa\050\uffaa\052\uffaa\053\uffaa\070\uffaa\073\uffaa" +
    "\074\uffaa\075\uffaa\076\uffaa\077\uffaa\101\uffaa\102\uffaa\103" +
    "\uffaa\104\uffaa\105\uffaa\106\uffaa\001\002\000\106\002\uffff" +
    "\024\uffff\027\uffff\030\uffff\032\uffff\033\uffff\034\uffff\037" +
    "\uffff\040\uffff\041\uffff\044\uffff\045\uffff\046\uffff\047\uffff" +
    "\050\uffff\052\uffff\053\uffff\056\uffff\057\uffff\060\uffff\061" +
    "\uffff\062\uffff\063\uffff\064\uffff\065\uffff\066\uffff\067\uffff" +
    "\073\uffff\101\uffff\102\uffff\103\uffff\104\uffff\105\uffff\106" +
    "\uffff\001\002\000\040\024\025\044\042\045\015\046\020" +
    "\047\044\050\047\052\006\053\010\073\026\101\016\102" +
    "\076\103\036\104\043\105\022\106\054\001\002\000\006" +
    "\023\101\077\344\001\002\000\040\024\025\044\042\045" +
    "\015\046\020\047\044\050\047\052\006\053\010\073\026" +
    "\101\016\102\076\103\036\104\043\105\022\106\054\001" +
    "\002\000\006\023\101\070\346\001\002\000\116\004\uffab" +
    "\005\uffab\006\uffab\007\uffab\010\uffab\011\uffab\012\uffab\013" +
    "\uffab\014\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab" +
    "\022\uffab\023\uffab\024\uffab\035\uffab\036\uffab\044\uffab\045" +
    "\uffab\046\uffab\047\uffab\050\uffab\052\uffab\053\uffab\070\uffab" +
    "\073\uffab\074\uffab\075\uffab\076\uffab\077\uffab\101\uffab\102" +
    "\uffab\103\uffab\104\uffab\105\uffab\106\uffab\001\002\000\004" +
    "\002\000\001\002\000\040\024\025\044\042\045\015\046" +
    "\020\047\044\050\047\052\006\053\010\073\026\101\016" +
    "\102\076\103\036\104\043\105\022\106\054\001\002\000" +
    "\006\023\101\077\352\001\002\000\040\024\025\044\042" +
    "\045\015\046\020\047\044\050\047\052\006\053\010\073" +
    "\026\101\016\102\076\103\036\104\043\105\022\106\054" +
    "\001\002\000\006\023\101\070\354\001\002\000\010\070" +
    "\uffed\075\uffed\077\uffed\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\352\000\052\002\004\003\006\004\067\005\032\006" +
    "\012\011\033\014\034\015\016\016\037\017\057\023\027" +
    "\026\031\027\010\030\036\031\060\032\062\033\061\034" +
    "\056\035\055\036\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\004\067\005\340\006" +
    "\012\011\033\014\034\015\016\016\037\017\057\023\027" +
    "\026\031\027\010\030\036\031\060\032\062\033\061\034" +
    "\056\035\055\036\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\300\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\016\037" +
    "\017\057\023\027\030\036\031\267\032\062\033\061\036" +
    "\064\001\001\000\034\007\265\011\205\012\206\016\037" +
    "\017\057\023\027\030\036\031\060\032\062\033\061\034" +
    "\056\035\055\036\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\011\245\016\037\017\057\023\027\030" +
    "\036\031\060\032\062\033\061\034\056\035\055\036\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\004\072\006\012\011\033\014\034\015\016\016" +
    "\037\017\057\023\027\026\031\027\010\030\036\031\060" +
    "\032\062\033\061\034\056\035\055\036\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\011\076\016\037" +
    "\017\057\023\027\030\036\031\060\032\062\033\061\034" +
    "\056\035\055\036\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\011\104\016\037\017\057\023\027\030" +
    "\036\031\060\032\062\033\061\034\056\035\055\036\064" +
    "\001\001\000\026\016\037\017\057\023\027\030\036\031" +
    "\060\032\062\033\061\034\056\035\101\036\064\001\001" +
    "\000\002\001\001\000\024\016\037\017\057\023\027\030" +
    "\036\031\060\032\062\033\061\034\103\036\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\011\106\016" +
    "\037\017\057\023\027\030\036\031\060\032\062\033\061" +
    "\034\056\035\055\036\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\016\123\017\057\023\027\030\036" +
    "\001\001\000\012\016\112\017\057\023\027\030\036\001" +
    "\001\000\002\001\001\000\010\017\122\023\027\030\036" +
    "\001\001\000\010\017\121\023\027\030\036\001\001\000" +
    "\010\017\116\023\027\030\036\001\001\000\002\001\001" +
    "\000\006\023\027\030\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\011\125\016\037\017\057\023\027\030\036\031\060\032" +
    "\062\033\061\034\056\035\055\036\064\001\001\000\002" +
    "\001\001\000\030\011\127\016\037\017\057\023\027\030" +
    "\036\031\060\032\062\033\061\034\056\035\055\036\064" +
    "\001\001\000\002\001\001\000\030\011\131\016\037\017" +
    "\057\023\027\030\036\031\060\032\062\033\061\034\056" +
    "\035\055\036\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\016\037\017\057\023\027\030\036\032\150" +
    "\036\064\001\001\000\014\016\037\017\057\023\027\030" +
    "\036\036\147\001\001\000\016\016\037\017\057\023\027" +
    "\030\036\032\146\036\064\001\001\000\016\016\037\017" +
    "\057\023\027\030\036\032\145\036\064\001\001\000\014" +
    "\016\037\017\057\023\027\030\036\036\144\001\001\000" +
    "\016\016\037\017\057\023\027\030\036\032\143\036\064" +
    "\001\001\000\016\016\037\017\057\023\027\030\036\032" +
    "\142\036\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\016\037\017\057" +
    "\023\027\030\036\032\062\033\152\036\064\001\001\000" +
    "\002\001\001\000\044\004\154\006\012\011\033\014\034" +
    "\015\016\016\037\017\057\023\027\026\031\027\010\030" +
    "\036\031\060\032\062\033\061\034\056\035\055\036\064" +
    "\001\001\000\002\001\001\000\004\037\156\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\004\162\006\012\011\033\014\034\015\016\016\037\017" +
    "\057\023\027\026\031\027\010\030\036\031\060\032\062" +
    "\033\061\034\056\035\055\036\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\011\165\016\037\017\057" +
    "\023\027\030\036\031\060\032\062\033\061\034\056\035" +
    "\055\036\064\001\001\000\002\001\001\000\030\011\167" +
    "\016\037\017\057\023\027\030\036\031\060\032\062\033" +
    "\061\034\056\035\055\036\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\024\172\025\173\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\177\001\001" +
    "\000\044\004\176\006\012\011\033\014\034\015\016\016" +
    "\037\017\057\023\027\026\031\027\010\030\036\031\060" +
    "\032\062\033\061\034\056\035\055\036\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\011\201\016\037" +
    "\017\057\023\027\030\036\031\060\032\062\033\061\034" +
    "\056\035\055\036\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\007\204\011\205\012\206\016\037\017" +
    "\057\023\027\030\036\031\060\032\062\033\061\034\056" +
    "\035\055\036\064\001\001\000\032\011\205\012\211\016" +
    "\037\017\057\023\027\030\036\031\060\032\062\033\061" +
    "\034\056\035\055\036\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\011\213\016\037\017\057\023\027\030" +
    "\036\031\060\032\062\033\061\034\056\035\055\036\064" +
    "\001\001\000\002\001\001\000\030\011\215\016\037\017" +
    "\057\023\027\030\036\031\060\032\062\033\061\034\056" +
    "\035\055\036\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\004\223\006\012\010\222\011\033\014\034" +
    "\015\016\016\037\017\057\023\027\026\031\027\010\030" +
    "\036\031\060\032\062\033\061\034\056\035\055\036\064" +
    "\001\001\000\030\011\221\016\037\017\057\023\027\030" +
    "\036\031\060\032\062\033\061\034\056\035\055\036\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\004\226\006\012\011\033\014\034\015\016" +
    "\016\037\017\057\023\027\026\031\027\010\030\036\031" +
    "\060\032\062\033\061\034\056\035\055\036\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\011\230\016" +
    "\037\017\057\023\027\030\036\031\060\032\062\033\061" +
    "\034\056\035\055\036\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\011\233\016\037\017\057\023\027" +
    "\030\036\031\060\032\062\033\061\034\056\035\055\036" +
    "\064\001\001\000\002\001\001\000\030\011\235\016\037" +
    "\017\057\023\027\030\036\031\060\032\062\033\061\034" +
    "\056\035\055\036\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\011\240\016\037\017\057\023\027\030" +
    "\036\031\060\032\062\033\061\034\056\035\055\036\064" +
    "\001\001\000\002\001\001\000\030\011\242\016\037\017" +
    "\057\023\027\030\036\031\060\032\062\033\061\034\056" +
    "\035\055\036\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\011\252\016\037\017\057\023\027\030\036" +
    "\031\060\032\062\033\061\034\056\035\055\036\064\001" +
    "\001\000\002\001\001\000\030\011\247\016\037\017\057" +
    "\023\027\030\036\031\060\032\062\033\061\034\056\035" +
    "\055\036\064\001\001\000\002\001\001\000\030\011\251" +
    "\016\037\017\057\023\027\030\036\031\060\032\062\033" +
    "\061\034\056\035\055\036\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\011\255\016" +
    "\037\017\057\023\027\030\036\031\060\032\062\033\061" +
    "\034\056\035\055\036\064\001\001\000\002\001\001\000" +
    "\030\011\257\016\037\017\057\023\027\030\036\031\060" +
    "\032\062\033\061\034\056\035\055\036\064\001\001\000" +
    "\002\001\001\000\030\011\261\016\037\017\057\023\027" +
    "\030\036\031\060\032\062\033\061\034\056\035\055\036" +
    "\064\001\001\000\002\001\001\000\046\004\223\006\012" +
    "\010\263\011\033\014\034\015\016\016\037\017\057\023" +
    "\027\026\031\027\010\030\036\031\060\032\062\033\061" +
    "\034\056\035\055\036\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\011\205\012\211\016\037\017\057" +
    "\023\027\030\036\031\060\032\062\033\061\034\056\035" +
    "\055\036\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\011\271\016\037\017\057\023\027\030\036\031" +
    "\060\032\062\033\061\034\056\035\055\036\064\001\001" +
    "\000\002\001\001\000\030\011\273\016\037\017\057\023" +
    "\027\030\036\031\060\032\062\033\061\034\056\035\055" +
    "\036\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\004\276\006\012\011\033\014\034\015\016\016\037" +
    "\017\057\023\027\026\031\027\010\030\036\031\060\032" +
    "\062\033\061\034\056\035\055\036\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\004\223\006\012\010\303\011\033\014\034" +
    "\015\016\016\037\017\057\023\027\026\031\027\010\030" +
    "\036\031\060\032\062\033\061\034\056\035\055\036\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\011" +
    "\306\016\037\017\057\023\027\030\036\031\060\032\062" +
    "\033\061\034\056\035\055\036\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\011\311\016\037\017\057" +
    "\023\027\030\036\031\060\032\062\033\061\034\056\035" +
    "\055\036\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\011\316\016\037\017\057\020\317\021\315\023" +
    "\027\030\036\031\060\032\062\033\061\034\056\035\055" +
    "\036\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\011\316\016\037\017\057\021\320" +
    "\023\027\030\036\031\060\032\062\033\061\034\056\035" +
    "\055\036\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\011\323\016\037\017\057\023\027\030\036\031" +
    "\060\032\062\033\061\034\056\035\055\036\064\001\001" +
    "\000\002\001\001\000\030\011\325\016\037\017\057\023" +
    "\027\030\036\031\060\032\062\033\061\034\056\035\055" +
    "\036\064\001\001\000\002\001\001\000\030\011\327\016" +
    "\037\017\057\023\027\030\036\031\060\032\062\033\061" +
    "\034\056\035\055\036\064\001\001\000\002\001\001\000" +
    "\030\011\331\016\037\017\057\023\027\030\036\031\060" +
    "\032\062\033\061\034\056\035\055\036\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\011\334\016\037" +
    "\017\057\023\027\030\036\031\060\032\062\033\061\034" +
    "\056\035\055\036\064\001\001\000\002\001\001\000\030" +
    "\011\336\016\037\017\057\023\027\030\036\031\060\032" +
    "\062\033\061\034\056\035\055\036\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\011" +
    "\342\016\037\017\057\023\027\030\036\031\060\032\062" +
    "\033\061\034\056\035\055\036\064\001\001\000\002\001" +
    "\001\000\030\011\344\016\037\017\057\023\027\030\036" +
    "\031\060\032\062\033\061\034\056\035\055\036\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\011\350\016\037\017\057\023\027\030\036\031" +
    "\060\032\062\033\061\034\056\035\055\036\064\001\001" +
    "\000\002\001\001\000\030\011\352\016\037\017\057\023" +
    "\027\030\036\031\060\032\062\033\061\034\056\035\055" +
    "\036\064\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

		// Create a lexer that reads from
		// supplied input stream or standard input
		if (in == null)
		   in = System.in;
		lexer = new Lexer(in);
	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return this.lexer.next_token();
		} catch (java.io.IOException ioe) {
		    System.out.println ("Unrecognised token");
		    System.out.println(ioe.getMessage());
		    throw ioe;
		}
	  
    }



		Lexer lexer;

		InputStream in = null;

		public Parser(InputStream is) {
	        	in = is;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol current_token) {
				System.err.println("There was an error on Line("+
					this.lexer.getLine() +
					") \n Syntax error at \"" + 
					this.lexer.getChar() + "\" ");

				report_error("Syntax error", current_token);
		
				System.err.println ("\nLast token read is " + this.lexer.getText());

			}
	    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // builtin ::= EQUALQ LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SMPLEqualQ(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("builtin",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // builtin ::= EQVQ LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SMPLEqvQ(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("builtin",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // builtin ::= PAIRQ LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ExpPairQ(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("builtin",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // builtin ::= LIST LPAREN expressionList RPAREN 
            {
              Exp RESULT =null;
		int elistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpSequence elist = (ExpSequence)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ExpSequence(elist); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("builtin",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // builtin ::= CDR LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ExpCdr(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("builtin",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // builtin ::= CAR LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ExpCar(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("builtin",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // builtin ::= PAIR LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ExpPair(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("builtin",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // single ::= STRING 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpString(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // single ::= builtin 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // single ::= HEX 
            {
              Exp RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SMPLHex(h); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // single ::= BIN 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SMPLBinary(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // single ::= LCURL expressionList RCURL 
            {
              Exp RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpSequence lst = (ExpSequence)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = lst; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // single ::= BOOLEAN 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpBool(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // single ::= VARIABLE 
            {
              Exp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpVar(var); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // single ::= INTEGER 
            {
              Exp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpLit(ilit); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // factor ::= single 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // factor ::= factor BITNOT single 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // term ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // term ::= term MOD factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = new ExpMod(t, f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // term ::= term DIV factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = new ExpDiv(t, f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // term ::= term MUL factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = new ExpMul(t, f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // e ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // e ::= e MINUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new ExpSub(e, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // e ::= e PLUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new ExpAdd(e, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // g ::= e 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("g",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // g ::= g BITOR e 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("g",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // g ::= g BITAND e 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("g",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // h ::= g 
            {
              Exp RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp g = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = g;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("h",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // h ::= g LESSEQ g 
            {
              Exp RESULT =null;
		int lgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp lg = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp rg = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpLessEq(lg,rg);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("h",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // h ::= g GREATEREQ g 
            {
              Exp RESULT =null;
		int lgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp lg = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp rg = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpGreaterEq(lg,rg);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("h",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // h ::= g LESS g 
            {
              Exp RESULT =null;
		int lgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp lg = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp rg = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpLess(lg,rg);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("h",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // h ::= g GREATER g 
            {
              Exp RESULT =null;
		int lgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp lg = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp rg = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpGreater(lg,rg);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("h",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // h ::= g EQUAL g 
            {
              Exp RESULT =null;
		int lgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp lg = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp rg = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpEqual(lg,rg);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("h",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // i ::= h 
            {
              Exp RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp h = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = h;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("i",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // i ::= h NOTEQ h 
            {
              Exp RESULT =null;
		int lhleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp lh = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp rh = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpNotEq(lh,rh);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("i",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // j ::= i 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("j",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // j ::= NOT i 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpNot(i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("j",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // k ::= j 
            {
              Exp RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp j = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = j;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("k",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // k ::= k AND j 
            {
              Exp RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp k = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp j = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpAnd(k,j);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("k",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= k 
            {
              Exp RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp k = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = k;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= expression OR k 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp k = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpOr(e,k);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expressions ::= expression COMMA 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expressionList ::= expressions 
            {
              ExpSequence RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExpSequence(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expressionList ::= expressionList expressions 
            {
              ExpSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpSequence lst = (ExpSequence)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		lst.add(e);
                      RESULT = lst;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ifstat ::= IF LPAREN expression RPAREN THEN expression ELSE expression 
            {
              Exp RESULT =null;
		int ifExpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int ifExpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Exp ifExp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int thenExpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int thenExpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp thenExp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elseExpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elseExpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp elseExp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpIfElse(ifExp,thenExp,elseExp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifstat",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ifstat ::= IF LPAREN expression RPAREN THEN expression 
            {
              Exp RESULT =null;
		int ifExpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ifExpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp ifExp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int thenExpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int thenExpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp thenExp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpIf(ifExp,thenExp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifstat",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ifstat ::= IF expression THEN expression ELSE expression 
            {
              Exp RESULT =null;
		int ifExpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int ifExpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp ifExp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int thenExpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int thenExpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp thenExp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elseExpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elseExpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp elseExp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpIfElse(ifExp,thenExp,elseExp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifstat",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ifstat ::= IF expression THEN expression 
            {
              Exp RESULT =null;
		int ifExpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ifExpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp ifExp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int thenExpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int thenExpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp thenExp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpIf(ifExp,thenExp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifstat",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // case ::= ELSE COLON expression 
            {
              Case RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Case(new ExpBool("#t"),c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // case ::= expression COLON expression 
            {
              Case RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Case(p,c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // caseList ::= case 
            {
              CaseSequence RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Case c = (Case)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = new CaseSequence(c);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caseList",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // caseList ::= caseList case 
            {
              CaseSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CaseSequence lst = (CaseSequence)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Case c = (Case)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		lst.add(c);
		RESULT = lst;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caseList",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // paramList ::= VARIABLE 
            {
              ArrayList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		ArrayList lst = new ArrayList();
                lst.add(v);
                RESULT = lst;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramList",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // paramList ::= paramList COMMA VARIABLE 
            {
              ArrayList RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList params = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		params.add(v);
		RESULT = params;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramList",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // procDef ::= PROC LPAREN paramList RPAREN stmt 
            {
              Exp RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList lst = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ProcDef(lst,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procDef",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // argList ::= stmt 
            {
              ExpSequence RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExpSequence(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // argList ::= argList COMMA stmt 
            {
              ExpSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpSequence lst = (ExpSequence)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		lst.add(e);
                      RESULT = lst;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // procCall ::= CALL LPAREN expression COMMA argList RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpSequence lst = (ExpSequence)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new SMPLCall(e,lst);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procCall",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // procCall ::= VARIABLE LPAREN argList RPAREN 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpSequence lst = (ExpSequence)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new VarProcCall(v,lst);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procCall",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // procCall ::= LPAREN procDef RPAREN LPAREN argList RPAREN 
            {
              Exp RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp pd = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpSequence lst = (ExpSequence)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new ProcCall(pd,lst);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procCall",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= SETBG LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= SETFG LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= CLEAR LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= CPATH LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= PATH LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= CIRCLE LPAREN expression COMMA expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= RECT LPAREN expression COMMA expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ExpRect(e1,e2,e3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= PT LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= CANVAS LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ExpCanvas(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= procCall 
            {
              Exp RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp pc = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = pc;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= procDef 
            {
              Exp RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp pd = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = pd;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= PRINTLN LPAREN stmt RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new ExpPrintLn(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= PRINT LPAREN stmt RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new ExpPrint(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= CASE LCURL caseList RCURL 
            {
              Exp RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CaseSequence lst = (CaseSequence)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = lst;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= LET LPAREN bindlist RPAREN stmt 
            {
              Exp RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		BindSequence lst = (BindSequence)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExpLet(lst,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= ifstat 
            {
              Exp RESULT =null;
		int ifstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ifstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp ifst = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ifst;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bindlist ::= bindlist COMMA letdfn 
            {
              BindSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		BindSequence lst = (BindSequence)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LetDef b = (LetDef)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		lst.add(b);RESULT = lst;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bindlist",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bindlist ::= letdfn 
            {
              BindSequence RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LetDef b = (LetDef)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BindSequence(b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bindlist",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // definition ::= VARIABLE ASSIGN expression 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new StmtDefinition(v, e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("definition",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // definition ::= DEF VARIABLE stmt 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new StmtDefinition(v, e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("definition",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Statement(s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= expression 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Statement(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= definition 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = d;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmts ::= stmt SEMICOL 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = s;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmts 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = new StmtSequence(s);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmts 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		lst.add(s);
		RESULT = lst;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArithProgram start_val = (ArithProgram)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              ArithProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArithProgram(s);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

