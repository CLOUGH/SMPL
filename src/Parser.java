
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jan 06 15:46:42 EST 2014
//----------------------------------------------------

import java.io.*;
import java.util.*;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jan 06 15:46:42 EST 2014
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\142\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\005\004\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\006\005\000" +
    "\002\006\005\000\002\024\003\000\002\024\005\000\002" +
    "\014\003\000\002\014\007\000\002\014\006\000\002\014" +
    "\006\000\002\014\006\000\002\014\003\000\002\014\010" +
    "\000\002\014\010\000\002\014\012\000\002\014\012\000" +
    "\002\014\010\000\002\014\010\000\002\014\006\000\002" +
    "\014\010\000\002\014\010\000\002\027\006\000\002\027" +
    "\005\000\002\040\005\000\002\040\003\000\002\026\007" +
    "\000\002\026\006\000\002\037\005\000\002\037\003\000" +
    "\002\020\005\000\002\020\003\000\002\021\005\000\002" +
    "\021\005\000\002\015\006\000\002\015\010\000\002\015" +
    "\010\000\002\015\012\000\002\007\004\000\002\007\003" +
    "\000\002\012\004\000\002\011\005\000\002\011\003\000" +
    "\002\035\005\000\002\035\003\000\002\034\004\000\002" +
    "\034\003\000\002\031\005\000\002\031\003\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\003\000\002\032\005\000" +
    "\002\032\005\000\002\032\003\000\002\036\005\000\002" +
    "\036\005\000\002\036\003\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\003\000\002\017\005" +
    "\000\002\017\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\005\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\023\010" +
    "\000\002\023\006\000\002\023\006\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\010\000\002" +
    "\023\010\000\002\023\010\000\002\042\010\000\002\042" +
    "\005\000\002\042\007\000\002\041\007\000\002\041\006" +
    "\000\002\043\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\376\000\110\024\027\027\056\032\054\033\060\034" +
    "\032\037\016\040\073\041\023\044\044\045\015\046\021" +
    "\047\047\050\052\051\040\052\006\053\011\056\051\057" +
    "\004\060\067\061\072\062\013\063\055\064\053\065\026" +
    "\066\043\072\046\073\030\101\017\102\050\103\037\104" +
    "\045\105\022\106\057\107\024\110\010\001\002\000\004" +
    "\067\374\001\002\000\004\002\373\001\002\000\004\067" +
    "\366\001\002\000\112\002\001\024\027\027\056\032\054" +
    "\033\060\034\032\037\016\040\073\041\023\044\044\045" +
    "\015\046\021\047\047\050\052\051\040\052\006\053\011" +
    "\056\051\057\004\060\067\061\072\062\013\063\055\064" +
    "\053\065\026\066\043\072\046\073\030\101\017\102\050" +
    "\103\037\104\045\105\022\106\057\107\024\110\010\001" +
    "\002\000\062\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1" +
    "\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017" +
    "\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\035\uffb1\036\uffb1" +
    "\070\uffb1\071\uffb1\074\uffb1\075\uffb1\076\uffb1\077\uffb1\001" +
    "\002\000\004\067\360\001\002\000\062\004\uffb0\005\uffb0" +
    "\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014" +
    "\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0" +
    "\023\uffb0\035\uffb0\036\uffb0\070\uffb0\071\uffb0\074\uffb0\075" +
    "\uffb0\076\uffb0\077\uffb0\001\002\000\004\067\353\001\002" +
    "\000\006\070\ufffc\075\ufffc\001\002\000\004\067\350\001" +
    "\002\000\004\073\334\001\002\000\062\004\uffb9\005\uffb9" +
    "\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\014" +
    "\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9" +
    "\023\uffb9\035\uffb9\036\uffb9\070\uffb9\071\uffb9\074\uffb9\075" +
    "\uffb9\076\uffb9\077\uffb9\001\002\000\006\070\ufff5\075\ufff5" +
    "\001\002\000\004\067\331\001\002\000\062\004\uffb4\005" +
    "\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4" +
    "\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022" +
    "\uffb4\023\uffb4\035\uffb4\036\uffb4\070\uffb4\071\uffb4\074\uffb4" +
    "\075\uffb4\076\uffb4\077\uffb4\001\002\000\004\067\326\001" +
    "\002\000\062\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf" +
    "\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017" +
    "\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\035\uffaf\036\uffaf" +
    "\070\uffaf\071\uffaf\074\uffaf\075\uffaf\076\uffaf\077\uffaf\001" +
    "\002\000\062\004\uffab\005\uffab\006\uffab\007\uffab\010\uffab" +
    "\011\uffab\012\uffab\013\uffab\014\uffab\015\uffab\016\uffab\017" +
    "\uffab\020\uffab\021\uffab\022\uffab\023\uffab\035\uffab\036\uffab" +
    "\070\uffab\071\uffab\074\uffab\075\uffab\076\uffab\077\uffab\001" +
    "\002\000\004\067\321\001\002\000\046\044\044\045\015" +
    "\046\021\047\047\050\052\051\040\052\006\053\011\072" +
    "\046\073\030\101\017\102\103\103\037\104\045\105\022" +
    "\106\057\107\024\110\010\001\002\000\050\024\027\044" +
    "\044\045\015\046\021\047\047\050\052\051\040\052\006" +
    "\053\011\072\046\073\030\101\017\102\103\103\037\104" +
    "\045\105\022\106\057\107\024\110\010\001\002\000\062" +
    "\004\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012" +
    "\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3" +
    "\021\uffb3\022\uffb3\023\uffb3\035\uffb3\036\uffb3\070\uffb3\071" +
    "\uffb3\074\uffb3\075\uffb3\076\uffb3\077\uffb3\001\002\000\052" +
    "\024\027\044\044\045\015\046\021\047\047\050\052\051" +
    "\040\052\006\053\011\067\276\072\046\073\030\101\017" +
    "\102\103\103\037\104\045\105\022\106\057\107\024\110" +
    "\010\001\002\000\006\070\ufff0\075\ufff0\001\002\000\112" +
    "\002\ufffe\024\ufffe\027\ufffe\032\ufffe\033\ufffe\034\ufffe\037" +
    "\ufffe\040\ufffe\041\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe" +
    "\050\ufffe\051\ufffe\052\ufffe\053\ufffe\056\ufffe\057\ufffe\060" +
    "\ufffe\061\ufffe\062\ufffe\063\ufffe\064\ufffe\065\ufffe\066\ufffe" +
    "\072\ufffe\073\ufffe\101\ufffe\102\ufffe\103\ufffe\104\ufffe\105" +
    "\ufffe\106\ufffe\107\ufffe\110\ufffe\001\002\000\010\023\106" +
    "\070\ufffb\075\ufffb\001\002\000\006\070\ufffa\075\ufffa\001" +
    "\002\000\062\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7" +
    "\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017" +
    "\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\035\uffb7\036\uffb7" +
    "\070\uffb7\071\uffb7\074\uffb7\075\uffb7\076\uffb7\077\uffb7\001" +
    "\002\000\004\067\267\001\002\000\062\004\uffba\005\uffba" +
    "\006\uffba\007\uffba\010\uffba\011\uffba\012\uffba\013\uffba\014" +
    "\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba" +
    "\023\uffba\035\uffba\036\uffba\070\uffba\071\uffba\074\uffba\075" +
    "\uffba\076\uffba\077\uffba\001\002\000\060\004\uffc0\005\uffc0" +
    "\006\131\007\132\010\130\011\uffc0\012\uffc0\014\uffc0\015" +
    "\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0" +
    "\035\uffc0\036\uffc0\070\uffc0\071\uffc0\074\uffc0\075\uffc0\076" +
    "\uffc0\077\uffc0\001\002\000\004\067\262\001\002\000\004" +
    "\067\255\001\002\000\062\004\uffb5\005\uffb5\006\uffb5\007" +
    "\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5" +
    "\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\035" +
    "\uffb5\036\uffb5\070\uffb5\071\uffb5\074\uffb5\075\uffb5\076\uffb5" +
    "\077\uffb5\001\002\000\052\024\027\044\044\045\015\046" +
    "\021\047\047\050\052\051\040\052\006\053\011\072\046" +
    "\073\030\076\245\101\017\102\103\103\037\104\045\105" +
    "\022\106\057\107\024\110\010\001\002\000\004\067\240" +
    "\001\002\000\052\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010" +
    "\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8" +
    "\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\026\236\067" +
    "\116\070\uffb8\075\uffb8\001\002\000\004\067\231\001\002" +
    "\000\004\067\222\001\002\000\004\067\217\001\002\000" +
    "\004\067\210\001\002\000\004\067\203\001\002\000\004" +
    "\067\172\001\002\000\062\004\uffb2\005\uffb2\006\uffb2\007" +
    "\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2" +
    "\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\035" +
    "\uffb2\036\uffb2\070\uffb2\071\uffb2\074\uffb2\075\uffb2\076\uffb2" +
    "\077\uffb2\001\002\000\004\102\170\001\002\000\026\022" +
    "\110\023\uffd2\035\uffd2\036\uffd2\070\uffd2\071\uffd2\074\uffd2" +
    "\075\uffd2\076\uffd2\077\uffd2\001\002\000\026\022\uffd0\023" +
    "\uffd0\035\uffd0\036\uffd0\070\uffd0\071\uffd0\074\uffd0\075\uffd0" +
    "\076\uffd0\077\uffd0\001\002\000\062\004\uffbc\005\uffbc\006" +
    "\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\134\014\uffbc" +
    "\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023" +
    "\uffbc\035\uffbc\036\uffbc\070\uffbc\071\uffbc\074\uffbc\075\uffbc" +
    "\076\uffbc\077\uffbc\001\002\000\026\022\uffce\023\uffce\035" +
    "\uffce\036\uffce\070\uffce\071\uffce\074\uffce\075\uffce\076\uffce" +
    "\077\uffce\001\002\000\030\021\166\022\uffcc\023\uffcc\035" +
    "\uffcc\036\uffcc\070\uffcc\071\uffcc\074\uffcc\075\uffcc\076\uffcc" +
    "\077\uffcc\001\002\000\046\011\152\012\154\014\155\015" +
    "\153\016\156\017\151\020\150\021\uffc6\022\uffc6\023\uffc6" +
    "\035\uffc6\036\uffc6\070\uffc6\071\uffc6\074\uffc6\075\uffc6\076" +
    "\uffc6\077\uffc6\001\002\000\004\067\141\001\002\000\052" +
    "\004\125\005\126\011\uffc3\012\uffc3\014\uffc3\015\uffc3\016" +
    "\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\035\uffc3" +
    "\036\uffc3\070\uffc3\071\uffc3\074\uffc3\075\uffc3\076\uffc3\077" +
    "\uffc3\001\002\000\062\004\uffa9\005\uffa9\006\uffa9\007\uffa9" +
    "\010\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016" +
    "\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\035\uffa9" +
    "\036\uffa9\070\uffa9\071\uffa9\074\uffa9\075\uffa9\076\uffa9\077" +
    "\uffa9\001\002\000\004\067\102\001\002\000\004\067\077" +
    "\001\002\000\004\075\076\001\002\000\062\004\uffaa\005" +
    "\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa" +
    "\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022" +
    "\uffaa\023\uffaa\035\uffaa\036\uffaa\070\uffaa\071\uffaa\074\uffaa" +
    "\075\uffaa\076\uffaa\077\uffaa\001\002\000\112\002\ufffd\024" +
    "\ufffd\027\ufffd\032\ufffd\033\ufffd\034\ufffd\037\ufffd\040\ufffd" +
    "\041\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051" +
    "\ufffd\052\ufffd\053\ufffd\056\ufffd\057\ufffd\060\ufffd\061\ufffd" +
    "\062\ufffd\063\ufffd\064\ufffd\065\ufffd\066\ufffd\072\ufffd\073" +
    "\ufffd\101\ufffd\102\ufffd\103\ufffd\104\ufffd\105\ufffd\106\ufffd" +
    "\107\ufffd\110\ufffd\001\002\000\110\024\027\027\056\032" +
    "\054\033\060\034\032\037\016\040\073\041\023\044\044" +
    "\045\015\046\021\047\047\050\052\051\040\052\006\053" +
    "\011\056\051\057\004\060\067\061\072\062\013\063\055" +
    "\064\053\065\026\066\043\072\046\073\030\101\017\102" +
    "\050\103\037\104\045\105\022\106\057\107\024\110\010" +
    "\001\002\000\004\070\101\001\002\000\006\070\ufff2\075" +
    "\ufff2\001\002\000\050\024\027\044\044\045\015\046\021" +
    "\047\047\050\052\051\040\052\006\053\011\072\046\073" +
    "\030\101\017\102\103\103\037\104\045\105\022\106\057" +
    "\107\024\110\010\001\002\000\064\004\uffb8\005\uffb8\006" +
    "\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8" +
    "\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023" +
    "\uffb8\035\uffb8\036\uffb8\067\116\070\uffb8\071\uffb8\074\uffb8" +
    "\075\uffb8\076\uffb8\077\uffb8\001\002\000\006\023\106\077" +
    "\105\001\002\000\050\024\027\044\044\045\015\046\021" +
    "\047\047\050\052\051\040\052\006\053\011\072\046\073" +
    "\030\101\017\102\103\103\037\104\045\105\022\106\057" +
    "\107\024\110\010\001\002\000\050\024\027\044\044\045" +
    "\015\046\021\047\047\050\052\051\040\052\006\053\011" +
    "\072\046\073\030\101\017\102\103\103\037\104\045\105" +
    "\022\106\057\107\024\110\010\001\002\000\026\022\110" +
    "\023\uffd3\035\uffd3\036\uffd3\070\uffd3\071\uffd3\074\uffd3\075" +
    "\uffd3\076\uffd3\077\uffd3\001\002\000\050\024\027\044\044" +
    "\045\015\046\021\047\047\050\052\051\040\052\006\053" +
    "\011\072\046\073\030\101\017\102\103\103\037\104\045" +
    "\105\022\106\057\107\024\110\010\001\002\000\026\022" +
    "\uffd1\023\uffd1\035\uffd1\036\uffd1\070\uffd1\071\uffd1\074\uffd1" +
    "\075\uffd1\076\uffd1\077\uffd1\001\002\000\006\023\106\077" +
    "\113\001\002\000\050\024\027\044\044\045\015\046\021" +
    "\047\047\050\052\051\040\052\006\053\011\072\046\073" +
    "\030\101\017\102\103\103\037\104\045\105\022\106\057" +
    "\107\024\110\010\001\002\000\006\023\106\070\115\001" +
    "\002\000\006\070\uffec\075\uffec\001\002\000\052\024\027" +
    "\044\044\045\015\046\021\047\047\050\052\051\040\052" +
    "\006\053\011\070\117\072\046\073\030\101\017\102\103" +
    "\103\037\104\045\105\022\106\057\107\024\110\010\001" +
    "\002\000\062\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5" +
    "\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017" +
    "\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\035\uffe5\036\uffe5" +
    "\070\uffe5\071\uffe5\074\uffe5\075\uffe5\076\uffe5\077\uffe5\001" +
    "\002\000\014\023\106\070\uffe3\071\uffe3\076\uffe3\077\uffe3" +
    "\001\002\000\006\070\123\077\122\001\002\000\050\024" +
    "\027\044\044\045\015\046\021\047\047\050\052\051\040" +
    "\052\006\053\011\072\046\073\030\101\017\102\103\103" +
    "\037\104\045\105\022\106\057\107\024\110\010\001\002" +
    "\000\062\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011" +
    "\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6" +
    "\020\uffe6\021\uffe6\022\uffe6\023\uffe6\035\uffe6\036\uffe6\070" +
    "\uffe6\071\uffe6\074\uffe6\075\uffe6\076\uffe6\077\uffe6\001\002" +
    "\000\014\023\106\070\uffe4\071\uffe4\076\uffe4\077\uffe4\001" +
    "\002\000\046\044\044\045\015\046\021\047\047\050\052" +
    "\051\040\052\006\053\011\072\046\073\030\101\017\102" +
    "\103\103\037\104\045\105\022\106\057\107\024\110\010" +
    "\001\002\000\046\044\044\045\015\046\021\047\047\050" +
    "\052\051\040\052\006\053\011\072\046\073\030\101\017" +
    "\102\103\103\037\104\045\105\022\106\057\107\024\110" +
    "\010\001\002\000\060\004\uffc1\005\uffc1\006\131\007\132" +
    "\010\130\011\uffc1\012\uffc1\014\uffc1\015\uffc1\016\uffc1\017" +
    "\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\035\uffc1\036\uffc1" +
    "\070\uffc1\071\uffc1\074\uffc1\075\uffc1\076\uffc1\077\uffc1\001" +
    "\002\000\046\044\044\045\015\046\021\047\047\050\052" +
    "\051\040\052\006\053\011\072\046\073\030\101\017\102" +
    "\103\103\037\104\045\105\022\106\057\107\024\110\010" +
    "\001\002\000\046\044\044\045\015\046\021\047\047\050" +
    "\052\051\040\052\006\053\011\072\046\073\030\101\017" +
    "\102\103\103\037\104\045\105\022\106\057\107\024\110" +
    "\010\001\002\000\046\044\044\045\015\046\021\047\047" +
    "\050\052\051\040\052\006\053\011\072\046\073\030\101" +
    "\017\102\103\103\037\104\045\105\022\106\057\107\024" +
    "\110\010\001\002\000\062\004\uffbe\005\uffbe\006\uffbe\007" +
    "\uffbe\010\uffbe\011\uffbe\012\uffbe\013\134\014\uffbe\015\uffbe" +
    "\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\035" +
    "\uffbe\036\uffbe\070\uffbe\071\uffbe\074\uffbe\075\uffbe\076\uffbe" +
    "\077\uffbe\001\002\000\046\044\044\045\015\046\021\047" +
    "\047\050\052\051\040\052\006\053\011\072\046\073\030" +
    "\101\017\102\103\103\037\104\045\105\022\106\057\107" +
    "\024\110\010\001\002\000\062\004\uffbb\005\uffbb\006\uffbb" +
    "\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015" +
    "\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb" +
    "\035\uffbb\036\uffbb\070\uffbb\071\uffbb\074\uffbb\075\uffbb\076" +
    "\uffbb\077\uffbb\001\002\000\062\004\uffbf\005\uffbf\006\uffbf" +
    "\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013\134\014\uffbf\015" +
    "\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf" +
    "\035\uffbf\036\uffbf\070\uffbf\071\uffbf\074\uffbf\075\uffbf\076" +
    "\uffbf\077\uffbf\001\002\000\062\004\uffbd\005\uffbd\006\uffbd" +
    "\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\134\014\uffbd\015" +
    "\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd" +
    "\035\uffbd\036\uffbd\070\uffbd\071\uffbd\074\uffbd\075\uffbd\076" +
    "\uffbd\077\uffbd\001\002\000\060\004\uffc2\005\uffc2\006\131" +
    "\007\132\010\130\011\uffc2\012\uffc2\014\uffc2\015\uffc2\016" +
    "\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\035\uffc2" +
    "\036\uffc2\070\uffc2\071\uffc2\074\uffc2\075\uffc2\076\uffc2\077" +
    "\uffc2\001\002\000\050\024\027\044\044\045\015\046\021" +
    "\047\047\050\052\051\040\052\006\053\011\072\046\073" +
    "\030\101\017\102\103\103\037\104\045\105\022\106\057" +
    "\107\024\110\010\001\002\000\006\023\106\077\143\001" +
    "\002\000\050\024\027\044\044\045\015\046\021\047\047" +
    "\050\052\051\040\052\006\053\011\072\046\073\030\101" +
    "\017\102\103\103\037\104\045\105\022\106\057\107\024" +
    "\110\010\001\002\000\006\023\106\077\145\001\002\000" +
    "\050\024\027\044\044\045\015\046\021\047\047\050\052" +
    "\051\040\052\006\053\011\072\046\073\030\101\017\102" +
    "\103\103\037\104\045\105\022\106\057\107\024\110\010" +
    "\001\002\000\006\023\106\070\147\001\002\000\006\070" +
    "\uffed\075\uffed\001\002\000\046\044\044\045\015\046\021" +
    "\047\047\050\052\051\040\052\006\053\011\072\046\073" +
    "\030\101\017\102\103\103\037\104\045\105\022\106\057" +
    "\107\024\110\010\001\002\000\046\044\044\045\015\046" +
    "\021\047\047\050\052\051\040\052\006\053\011\072\046" +
    "\073\030\101\017\102\103\103\037\104\045\105\022\106" +
    "\057\107\024\110\010\001\002\000\046\044\044\045\015" +
    "\046\021\047\047\050\052\051\040\052\006\053\011\072" +
    "\046\073\030\101\017\102\103\103\037\104\045\105\022" +
    "\106\057\107\024\110\010\001\002\000\046\044\044\045" +
    "\015\046\021\047\047\050\052\051\040\052\006\053\011" +
    "\072\046\073\030\101\017\102\103\103\037\104\045\105" +
    "\022\106\057\107\024\110\010\001\002\000\046\044\044" +
    "\045\015\046\021\047\047\050\052\051\040\052\006\053" +
    "\011\072\046\073\030\101\017\102\103\103\037\104\045" +
    "\105\022\106\057\107\024\110\010\001\002\000\046\044" +
    "\044\045\015\046\021\047\047\050\052\051\040\052\006" +
    "\053\011\072\046\073\030\101\017\102\103\103\037\104" +
    "\045\105\022\106\057\107\024\110\010\001\002\000\046" +
    "\044\044\045\015\046\021\047\047\050\052\051\040\052" +
    "\006\053\011\072\046\073\030\101\017\102\103\103\037" +
    "\104\045\105\022\106\057\107\024\110\010\001\002\000" +
    "\034\011\152\012\154\021\uffc9\022\uffc9\023\uffc9\035\uffc9" +
    "\036\uffc9\070\uffc9\071\uffc9\074\uffc9\075\uffc9\076\uffc9\077" +
    "\uffc9\001\002\000\034\011\152\012\154\021\uffcb\022\uffcb" +
    "\023\uffcb\035\uffcb\036\uffcb\070\uffcb\071\uffcb\074\uffcb\075" +
    "\uffcb\076\uffcb\077\uffcb\001\002\000\052\004\125\005\126" +
    "\011\uffc4\012\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020" +
    "\uffc4\021\uffc4\022\uffc4\023\uffc4\035\uffc4\036\uffc4\070\uffc4" +
    "\071\uffc4\074\uffc4\075\uffc4\076\uffc4\077\uffc4\001\002\000" +
    "\034\011\152\012\154\021\uffca\022\uffca\023\uffca\035\uffca" +
    "\036\uffca\070\uffca\071\uffca\074\uffca\075\uffca\076\uffca\077" +
    "\uffca\001\002\000\052\004\125\005\126\011\uffc5\012\uffc5" +
    "\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022" +
    "\uffc5\023\uffc5\035\uffc5\036\uffc5\070\uffc5\071\uffc5\074\uffc5" +
    "\075\uffc5\076\uffc5\077\uffc5\001\002\000\034\011\152\012" +
    "\154\021\uffc7\022\uffc7\023\uffc7\035\uffc7\036\uffc7\070\uffc7" +
    "\071\uffc7\074\uffc7\075\uffc7\076\uffc7\077\uffc7\001\002\000" +
    "\034\011\152\012\154\021\uffc8\022\uffc8\023\uffc8\035\uffc8" +
    "\036\uffc8\070\uffc8\071\uffc8\074\uffc8\075\uffc8\076\uffc8\077" +
    "\uffc8\001\002\000\046\044\044\045\015\046\021\047\047" +
    "\050\052\051\040\052\006\053\011\072\046\073\030\101" +
    "\017\102\103\103\037\104\045\105\022\106\057\107\024" +
    "\110\010\001\002\000\026\022\uffcd\023\uffcd\035\uffcd\036" +
    "\uffcd\070\uffcd\071\uffcd\074\uffcd\075\uffcd\076\uffcd\077\uffcd" +
    "\001\002\000\110\024\027\027\056\032\054\033\060\034" +
    "\032\037\016\040\073\041\023\044\044\045\015\046\021" +
    "\047\047\050\052\051\040\052\006\053\011\056\051\057" +
    "\004\060\067\061\072\062\013\063\055\064\053\065\026" +
    "\066\043\072\046\073\030\101\017\102\050\103\037\104" +
    "\045\105\022\106\057\107\024\110\010\001\002\000\006" +
    "\070\ufff9\075\ufff9\001\002\000\006\070\174\102\175\001" +
    "\002\000\006\070\200\077\177\001\002\000\110\024\027" +
    "\027\056\032\054\033\060\034\032\037\016\040\073\041" +
    "\023\044\044\045\015\046\021\047\047\050\052\051\040" +
    "\052\006\053\011\056\051\057\004\060\067\061\072\062" +
    "\013\063\055\064\053\065\026\066\043\072\046\073\030" +
    "\101\017\102\050\103\037\104\045\105\022\106\057\107" +
    "\024\110\010\001\002\000\006\070\uffdf\077\uffdf\001\002" +
    "\000\006\070\uffe1\075\uffe1\001\002\000\004\102\202\001" +
    "\002\000\110\024\027\027\056\032\054\033\060\034\032" +
    "\037\016\040\073\041\023\044\044\045\015\046\021\047" +
    "\047\050\052\051\040\052\006\053\011\056\051\057\004" +
    "\060\067\061\072\062\013\063\055\064\053\065\026\066" +
    "\043\072\046\073\030\101\017\102\050\103\037\104\045" +
    "\105\022\106\057\107\024\110\010\001\002\000\006\070" +
    "\uffe2\075\uffe2\001\002\000\006\070\uffe0\077\uffe0\001\002" +
    "\000\050\024\027\044\044\045\015\046\021\047\047\050" +
    "\052\051\040\052\006\053\011\072\046\073\030\101\017" +
    "\102\103\103\037\104\045\105\022\106\057\107\024\110" +
    "\010\001\002\000\006\023\106\077\205\001\002\000\050" +
    "\024\027\044\044\045\015\046\021\047\047\050\052\051" +
    "\040\052\006\053\011\072\046\073\030\101\017\102\103" +
    "\103\037\104\045\105\022\106\057\107\024\110\010\001" +
    "\002\000\006\023\106\070\207\001\002\000\006\070\uffea" +
    "\075\uffea\001\002\000\002\001\002\000\006\070\214\077" +
    "\213\001\002\000\006\070\ufff7\077\ufff7\001\002\000\002" +
    "\001\002\000\110\024\027\027\056\032\054\033\060\034" +
    "\032\037\016\040\073\041\023\044\044\045\015\046\021" +
    "\047\047\050\052\051\040\052\006\053\011\056\051\057" +
    "\004\060\067\061\072\062\013\063\055\064\053\065\026" +
    "\066\043\072\046\073\030\101\017\102\050\103\037\104" +
    "\045\105\022\106\057\107\024\110\010\001\002\000\006" +
    "\070\ufff4\075\ufff4\001\002\000\006\070\ufff6\077\ufff6\001" +
    "\002\000\050\024\027\044\044\045\015\046\021\047\047" +
    "\050\052\051\040\052\006\053\011\072\046\073\030\101" +
    "\017\102\103\103\037\104\045\105\022\106\057\107\024" +
    "\110\010\001\002\000\006\023\106\070\221\001\002\000" +
    "\006\070\uffe9\075\uffe9\001\002\000\004\072\223\001\002" +
    "\000\052\024\027\044\044\045\015\046\021\047\047\050" +
    "\052\051\040\052\006\053\011\071\224\072\046\073\030" +
    "\101\017\102\103\103\037\104\045\105\022\106\057\107" +
    "\024\110\010\001\002\000\004\070\230\001\002\000\006" +
    "\071\226\077\122\001\002\000\004\070\227\001\002\000" +
    "\062\004\uffa5\005\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5" +
    "\012\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5\020" +
    "\uffa5\021\uffa5\022\uffa5\023\uffa5\035\uffa5\036\uffa5\070\uffa5" +
    "\071\uffa5\074\uffa5\075\uffa5\076\uffa5\077\uffa5\001\002\000" +
    "\062\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3" +
    "\012\uffa3\013\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3\020" +
    "\uffa3\021\uffa3\022\uffa3\023\uffa3\035\uffa3\036\uffa3\070\uffa3" +
    "\071\uffa3\074\uffa3\075\uffa3\076\uffa3\077\uffa3\001\002\000" +
    "\050\024\027\044\044\045\015\046\021\047\047\050\052" +
    "\051\040\052\006\053\011\072\046\073\030\101\017\102" +
    "\103\103\037\104\045\105\022\106\057\107\024\110\010" +
    "\001\002\000\006\023\106\077\233\001\002\000\050\024" +
    "\027\044\044\045\015\046\021\047\047\050\052\051\040" +
    "\052\006\053\011\072\046\073\030\101\017\102\103\103" +
    "\037\104\045\105\022\106\057\107\024\110\010\001\002" +
    "\000\006\023\106\070\235\001\002\000\006\070\uffef\075" +
    "\uffef\001\002\000\050\024\027\044\044\045\015\046\021" +
    "\047\047\050\052\051\040\052\006\053\011\072\046\073" +
    "\030\101\017\102\103\103\037\104\045\105\022\106\057" +
    "\107\024\110\010\001\002\000\010\023\106\070\ufff8\075" +
    "\ufff8\001\002\000\004\072\241\001\002\000\050\024\027" +
    "\044\044\045\015\046\021\047\047\050\052\051\040\052" +
    "\006\053\011\072\046\073\030\101\017\102\103\103\037" +
    "\104\045\105\022\106\057\107\024\110\010\001\002\000" +
    "\006\023\106\071\243\001\002\000\004\070\244\001\002" +
    "\000\062\004\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011" +
    "\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8" +
    "\020\uffa8\021\uffa8\022\uffa8\023\uffa8\035\uffa8\036\uffa8\070" +
    "\uffa8\071\uffa8\074\uffa8\075\uffa8\076\uffa8\077\uffa8\001\002" +
    "\000\052\024\027\044\044\045\015\046\021\047\047\050" +
    "\052\051\040\052\006\053\011\072\046\073\030\076\250" +
    "\101\017\102\103\103\037\104\045\105\022\106\057\107" +
    "\024\110\010\001\002\000\006\071\247\077\122\001\002" +
    "\000\062\004\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4\011" +
    "\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4" +
    "\020\uffa4\021\uffa4\022\uffa4\023\uffa4\035\uffa4\036\uffa4\070" +
    "\uffa4\071\uffa4\074\uffa4\075\uffa4\076\uffa4\077\uffa4\001\002" +
    "\000\004\071\254\001\002\000\006\076\252\077\122\001" +
    "\002\000\004\071\253\001\002\000\062\004\uffa2\005\uffa2" +
    "\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014" +
    "\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2" +
    "\023\uffa2\035\uffa2\036\uffa2\070\uffa2\071\uffa2\074\uffa2\075" +
    "\uffa2\076\uffa2\077\uffa2\001\002\000\062\004\uffa1\005\uffa1" +
    "\006\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1\014" +
    "\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1" +
    "\023\uffa1\035\uffa1\036\uffa1\070\uffa1\071\uffa1\074\uffa1\075" +
    "\uffa1\076\uffa1\077\uffa1\001\002\000\050\024\027\044\044" +
    "\045\015\046\021\047\047\050\052\051\040\052\006\053" +
    "\011\072\046\073\030\101\017\102\103\103\037\104\045" +
    "\105\022\106\057\107\024\110\010\001\002\000\006\023" +
    "\106\077\257\001\002\000\050\024\027\044\044\045\015" +
    "\046\021\047\047\050\052\051\040\052\006\053\011\072" +
    "\046\073\030\101\017\102\103\103\037\104\045\105\022" +
    "\106\057\107\024\110\010\001\002\000\006\023\106\070" +
    "\261\001\002\000\062\004\uffae\005\uffae\006\uffae\007\uffae" +
    "\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae\015\uffae\016" +
    "\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae\035\uffae" +
    "\036\uffae\070\uffae\071\uffae\074\uffae\075\uffae\076\uffae\077" +
    "\uffae\001\002\000\050\024\027\044\044\045\015\046\021" +
    "\047\047\050\052\051\040\052\006\053\011\072\046\073" +
    "\030\101\017\102\103\103\037\104\045\105\022\106\057" +
    "\107\024\110\010\001\002\000\006\023\106\077\264\001" +
    "\002\000\050\024\027\044\044\045\015\046\021\047\047" +
    "\050\052\051\040\052\006\053\011\072\046\073\030\101" +
    "\017\102\103\103\037\104\045\105\022\106\057\107\024" +
    "\110\010\001\002\000\006\023\106\070\266\001\002\000" +
    "\006\070\uffe7\075\uffe7\001\002\000\004\072\270\001\002" +
    "\000\004\076\271\001\002\000\050\024\027\044\044\045" +
    "\015\046\021\047\047\050\052\051\040\052\006\053\011" +
    "\072\046\073\030\101\017\102\103\103\037\104\045\105" +
    "\022\106\057\107\024\110\010\001\002\000\006\076\273" +
    "\077\122\001\002\000\004\071\274\001\002\000\004\070" +
    "\275\001\002\000\062\004\uffa0\005\uffa0\006\uffa0\007\uffa0" +
    "\010\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016" +
    "\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\035\uffa0" +
    "\036\uffa0\070\uffa0\071\uffa0\074\uffa0\075\uffa0\076\uffa0\077" +
    "\uffa0\001\002\000\050\024\027\044\044\045\015\046\021" +
    "\047\047\050\052\051\040\052\006\053\011\072\046\073" +
    "\030\101\017\102\103\103\037\104\045\105\022\106\057" +
    "\107\024\110\010\001\002\000\006\023\106\035\300\001" +
    "\002\000\050\024\027\044\044\045\015\046\021\047\047" +
    "\050\052\051\040\052\006\053\011\072\046\073\030\101" +
    "\017\102\103\103\037\104\045\105\022\106\057\107\024" +
    "\110\010\001\002\000\012\023\106\036\302\070\uffda\075" +
    "\uffda\001\002\000\050\024\027\044\044\045\015\046\021" +
    "\047\047\050\052\051\040\052\006\053\011\072\046\073" +
    "\030\101\017\102\103\103\037\104\045\105\022\106\057" +
    "\107\024\110\010\001\002\000\010\023\106\070\uffd9\075" +
    "\uffd9\001\002\000\006\023\106\070\305\001\002\000\004" +
    "\035\306\001\002\000\050\024\027\044\044\045\015\046" +
    "\021\047\047\050\052\051\040\052\006\053\011\072\046" +
    "\073\030\101\017\102\103\103\037\104\045\105\022\106" +
    "\057\107\024\110\010\001\002\000\012\023\106\036\310" +
    "\070\uffd8\075\uffd8\001\002\000\050\024\027\044\044\045" +
    "\015\046\021\047\047\050\052\051\040\052\006\053\011" +
    "\072\046\073\030\101\017\102\103\103\037\104\045\105" +
    "\022\106\057\107\024\110\010\001\002\000\010\023\106" +
    "\070\uffd7\075\uffd7\001\002\000\006\023\106\077\317\001" +
    "\002\000\052\024\027\044\044\045\015\046\021\047\047" +
    "\050\052\051\040\052\006\053\011\072\046\073\030\074" +
    "\315\101\017\102\103\103\037\104\045\105\022\106\057" +
    "\107\024\110\010\001\002\000\052\024\uffd5\044\uffd5\045" +
    "\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5" +
    "\072\uffd5\073\uffd5\074\uffd5\101\uffd5\102\uffd5\103\uffd5\104" +
    "\uffd5\105\uffd5\106\uffd5\107\uffd5\110\uffd5\001\002\000\062" +
    "\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012" +
    "\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6" +
    "\021\uffb6\022\uffb6\023\uffb6\035\uffb6\036\uffb6\070\uffb6\071" +
    "\uffb6\074\uffb6\075\uffb6\076\uffb6\077\uffb6\001\002\000\052" +
    "\024\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051" +
    "\uffd6\052\uffd6\053\uffd6\072\uffd6\073\uffd6\074\uffd6\101\uffd6" +
    "\102\uffd6\103\uffd6\104\uffd6\105\uffd6\106\uffd6\107\uffd6\110" +
    "\uffd6\001\002\000\052\024\uffd4\044\uffd4\045\uffd4\046\uffd4" +
    "\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\072\uffd4\073" +
    "\uffd4\074\uffd4\101\uffd4\102\uffd4\103\uffd4\104\uffd4\105\uffd4" +
    "\106\uffd4\107\uffd4\110\uffd4\001\002\000\026\022\uffcf\023" +
    "\uffcf\035\uffcf\036\uffcf\070\uffcf\071\uffcf\074\uffcf\075\uffcf" +
    "\076\uffcf\077\uffcf\001\002\000\050\024\027\044\044\045" +
    "\015\046\021\047\047\050\052\051\040\052\006\053\011" +
    "\072\046\073\030\101\017\102\103\103\037\104\045\105" +
    "\022\106\057\107\024\110\010\001\002\000\006\023\106" +
    "\077\323\001\002\000\050\024\027\044\044\045\015\046" +
    "\021\047\047\050\052\051\040\052\006\053\011\072\046" +
    "\073\030\101\017\102\103\103\037\104\045\105\022\106" +
    "\057\107\024\110\010\001\002\000\006\023\106\070\325" +
    "\001\002\000\006\070\uffe8\075\uffe8\001\002\000\110\024" +
    "\027\027\056\032\054\033\060\034\032\037\016\040\073" +
    "\041\023\044\044\045\015\046\021\047\047\050\052\051" +
    "\040\052\006\053\011\056\051\057\004\060\067\061\072" +
    "\062\013\063\055\064\053\065\026\066\043\072\046\073" +
    "\030\101\017\102\050\103\037\104\045\105\022\106\057" +
    "\107\024\110\010\001\002\000\004\070\330\001\002\000" +
    "\006\070\ufff1\075\ufff1\001\002\000\050\024\027\044\044" +
    "\045\015\046\021\047\047\050\052\051\040\052\006\053" +
    "\011\072\046\073\030\101\017\102\103\103\037\104\045" +
    "\105\022\106\057\107\024\110\010\001\002\000\006\023" +
    "\106\070\333\001\002\000\062\004\uffac\005\uffac\006\uffac" +
    "\007\uffac\010\uffac\011\uffac\012\uffac\013\uffac\014\uffac\015" +
    "\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac" +
    "\035\uffac\036\uffac\070\uffac\071\uffac\074\uffac\075\uffac\076" +
    "\uffac\077\uffac\001\002\000\052\024\027\036\337\044\044" +
    "\045\015\046\021\047\047\050\052\051\040\052\006\053" +
    "\011\072\046\073\030\101\017\102\103\103\037\104\045" +
    "\105\022\106\057\107\024\110\010\001\002\000\006\074" +
    "\346\077\345\001\002\000\006\023\106\076\343\001\002" +
    "\000\004\076\341\001\002\000\006\074\uffdd\077\uffdd\001" +
    "\002\000\050\024\027\044\044\045\015\046\021\047\047" +
    "\050\052\051\040\052\006\053\011\072\046\073\030\101" +
    "\017\102\103\103\037\104\045\105\022\106\057\107\024" +
    "\110\010\001\002\000\010\023\106\074\uffdb\077\uffdb\001" +
    "\002\000\050\024\027\044\044\045\015\046\021\047\047" +
    "\050\052\051\040\052\006\053\011\072\046\073\030\101" +
    "\017\102\103\103\037\104\045\105\022\106\057\107\024" +
    "\110\010\001\002\000\010\023\106\074\uffdc\077\uffdc\001" +
    "\002\000\052\024\027\036\337\044\044\045\015\046\021" +
    "\047\047\050\052\051\040\052\006\053\011\072\046\073" +
    "\030\101\017\102\103\103\037\104\045\105\022\106\057" +
    "\107\024\110\010\001\002\000\006\070\ufff3\075\ufff3\001" +
    "\002\000\006\074\uffde\077\uffde\001\002\000\050\024\027" +
    "\044\044\045\015\046\021\047\047\050\052\051\040\052" +
    "\006\053\011\072\046\073\030\101\017\102\103\103\037" +
    "\104\045\105\022\106\057\107\024\110\010\001\002\000" +
    "\006\023\106\070\352\001\002\000\062\004\uffad\005\uffad" +
    "\006\uffad\007\uffad\010\uffad\011\uffad\012\uffad\013\uffad\014" +
    "\uffad\015\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad" +
    "\023\uffad\035\uffad\036\uffad\070\uffad\071\uffad\074\uffad\075" +
    "\uffad\076\uffad\077\uffad\001\002\000\050\024\027\044\044" +
    "\045\015\046\021\047\047\050\052\051\040\052\006\053" +
    "\011\072\046\073\030\101\017\102\103\103\037\104\045" +
    "\105\022\106\057\107\024\110\010\001\002\000\006\023" +
    "\106\077\355\001\002\000\050\024\027\044\044\045\015" +
    "\046\021\047\047\050\052\051\040\052\006\053\011\072" +
    "\046\073\030\101\017\102\103\103\037\104\045\105\022" +
    "\106\057\107\024\110\010\001\002\000\006\023\106\070" +
    "\357\001\002\000\006\070\uffeb\075\uffeb\001\002\000\050" +
    "\024\027\044\044\045\015\046\021\047\047\050\052\051" +
    "\040\052\006\053\011\072\046\073\030\101\017\102\103" +
    "\103\037\104\045\105\022\106\057\107\024\110\010\001" +
    "\002\000\006\023\106\077\362\001\002\000\050\024\027" +
    "\044\044\045\015\046\021\047\047\050\052\051\040\052" +
    "\006\053\011\072\046\073\030\101\017\102\103\103\037" +
    "\104\045\105\022\106\057\107\024\110\010\001\002\000" +
    "\006\023\106\070\364\001\002\000\062\004\uffa6\005\uffa6" +
    "\006\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\014" +
    "\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6" +
    "\023\uffa6\035\uffa6\036\uffa6\070\uffa6\071\uffa6\074\uffa6\075" +
    "\uffa6\076\uffa6\077\uffa6\001\002\000\112\002\uffff\024\uffff" +
    "\027\uffff\032\uffff\033\uffff\034\uffff\037\uffff\040\uffff\041" +
    "\uffff\044\uffff\045\uffff\046\uffff\047\uffff\050\uffff\051\uffff" +
    "\052\uffff\053\uffff\056\uffff\057\uffff\060\uffff\061\uffff\062" +
    "\uffff\063\uffff\064\uffff\065\uffff\066\uffff\072\uffff\073\uffff" +
    "\101\uffff\102\uffff\103\uffff\104\uffff\105\uffff\106\uffff\107" +
    "\uffff\110\uffff\001\002\000\050\024\027\044\044\045\015" +
    "\046\021\047\047\050\052\051\040\052\006\053\011\072" +
    "\046\073\030\101\017\102\103\103\037\104\045\105\022" +
    "\106\057\107\024\110\010\001\002\000\006\023\106\077" +
    "\370\001\002\000\050\024\027\044\044\045\015\046\021" +
    "\047\047\050\052\051\040\052\006\053\011\072\046\073" +
    "\030\101\017\102\103\103\037\104\045\105\022\106\057" +
    "\107\024\110\010\001\002\000\006\023\106\070\372\001" +
    "\002\000\062\004\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7" +
    "\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017" +
    "\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\035\uffa7\036\uffa7" +
    "\070\uffa7\071\uffa7\074\uffa7\075\uffa7\076\uffa7\077\uffa7\001" +
    "\002\000\004\002\000\001\002\000\050\024\027\044\044" +
    "\045\015\046\021\047\047\050\052\051\040\052\006\053" +
    "\011\072\046\073\030\101\017\102\103\103\037\104\045" +
    "\105\022\106\057\107\024\110\010\001\002\000\006\023" +
    "\106\077\376\001\002\000\050\024\027\044\044\045\015" +
    "\046\021\047\047\050\052\051\040\052\006\053\011\072" +
    "\046\073\030\101\017\102\103\103\037\104\045\105\022" +
    "\106\057\107\024\110\010\001\002\000\006\023\106\070" +
    "\u0100\001\002\000\006\070\uffee\075\uffee\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\376\000\060\002\004\003\006\004\073\005\033\006" +
    "\013\011\034\014\035\015\017\016\041\017\062\023\030" +
    "\026\032\027\011\030\040\031\063\032\065\033\064\034" +
    "\061\035\060\036\067\041\074\042\024\043\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\004\073\005\364\006\013\011\034\014\035\015\017" +
    "\016\041\017\062\023\030\026\032\027\011\030\040\031" +
    "\063\032\065\033\064\034\061\035\060\036\067\041\074" +
    "\042\024\043\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\016\041\017\062\023\030\027\011\030\040" +
    "\031\317\032\065\033\064\036\067\041\074\042\024\043" +
    "\070\001\001\000\044\007\312\011\311\012\313\016\041" +
    "\017\062\023\030\027\011\030\040\031\063\032\065\033" +
    "\064\034\061\035\060\036\067\041\074\042\024\043\070" +
    "\001\001\000\002\001\001\000\040\011\276\016\041\017" +
    "\062\023\030\027\011\030\040\031\063\032\065\033\064" +
    "\034\061\035\060\036\067\041\074\042\024\043\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\011\117\016\041\017" +
    "\062\023\030\027\011\030\040\031\063\032\065\033\064" +
    "\034\061\035\060\036\067\040\245\041\074\042\024\043" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\004\077\006" +
    "\013\011\034\014\035\015\017\016\041\017\062\023\030" +
    "\026\032\027\011\030\040\031\063\032\065\033\064\034" +
    "\061\035\060\036\067\041\074\042\024\043\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\011\103\016" +
    "\041\017\062\023\030\027\011\030\040\031\063\032\065" +
    "\033\064\034\061\035\060\036\067\041\074\042\024\043" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\011\111\016\041\017\062\023\030\027\011\030\040\031" +
    "\063\032\065\033\064\034\061\035\060\036\067\041\074" +
    "\042\024\043\070\001\001\000\036\016\041\017\062\023" +
    "\030\027\011\030\040\031\063\032\065\033\064\034\061" +
    "\035\106\036\067\041\074\042\024\043\070\001\001\000" +
    "\002\001\001\000\034\016\041\017\062\023\030\027\011" +
    "\030\040\031\063\032\065\033\064\034\110\036\067\041" +
    "\074\042\024\043\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\011\113\016\041\017\062\023\030\027" +
    "\011\030\040\031\063\032\065\033\064\034\061\035\060" +
    "\036\067\041\074\042\024\043\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\011\117\016\041\017\062" +
    "\023\030\027\011\030\040\031\063\032\065\033\064\034" +
    "\061\035\060\036\067\040\120\041\074\042\024\043\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\011\123\016\041\017\062\023\030\027\011" +
    "\030\040\031\063\032\065\033\064\034\061\035\060\036" +
    "\067\041\074\042\024\043\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\016\137\017\062\023\030\027" +
    "\011\030\040\041\074\042\024\043\070\001\001\000\022" +
    "\016\126\017\062\023\030\027\011\030\040\041\074\042" +
    "\024\043\070\001\001\000\002\001\001\000\020\017\136" +
    "\023\030\027\011\030\040\041\074\042\024\043\070\001" +
    "\001\000\020\017\135\023\030\027\011\030\040\041\074" +
    "\042\024\043\070\001\001\000\020\017\132\023\030\027" +
    "\011\030\040\041\074\042\024\043\070\001\001\000\002" +
    "\001\001\000\016\023\030\027\011\030\134\041\074\042" +
    "\024\043\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\011\141\016" +
    "\041\017\062\023\030\027\011\030\040\031\063\032\065" +
    "\033\064\034\061\035\060\036\067\041\074\042\024\043" +
    "\070\001\001\000\002\001\001\000\040\011\143\016\041" +
    "\017\062\023\030\027\011\030\040\031\063\032\065\033" +
    "\064\034\061\035\060\036\067\041\074\042\024\043\070" +
    "\001\001\000\002\001\001\000\040\011\145\016\041\017" +
    "\062\023\030\027\011\030\040\031\063\032\065\033\064" +
    "\034\061\035\060\036\067\041\074\042\024\043\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\016\041" +
    "\017\062\023\030\027\011\030\040\032\164\036\067\041" +
    "\074\042\024\043\070\001\001\000\026\016\041\017\062" +
    "\023\030\027\011\030\040\032\163\036\067\041\074\042" +
    "\024\043\070\001\001\000\024\016\041\017\062\023\030" +
    "\027\011\030\040\036\162\041\074\042\024\043\070\001" +
    "\001\000\026\016\041\017\062\023\030\027\011\030\040" +
    "\032\161\036\067\041\074\042\024\043\070\001\001\000" +
    "\024\016\041\017\062\023\030\027\011\030\040\036\160" +
    "\041\074\042\024\043\070\001\001\000\026\016\041\017" +
    "\062\023\030\027\011\030\040\032\157\036\067\041\074" +
    "\042\024\043\070\001\001\000\026\016\041\017\062\023" +
    "\030\027\011\030\040\032\156\036\067\041\074\042\024" +
    "\043\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\016\041\017\062\023" +
    "\030\027\011\030\040\032\065\033\166\036\067\041\074" +
    "\042\024\043\070\001\001\000\002\001\001\000\052\004" +
    "\170\006\013\011\034\014\035\015\017\016\041\017\062" +
    "\023\030\026\032\027\011\030\040\031\063\032\065\033" +
    "\064\034\061\035\060\036\067\041\074\042\024\043\070" +
    "\001\001\000\002\001\001\000\004\037\172\001\001\000" +
    "\002\001\001\000\052\004\175\006\013\011\034\014\035" +
    "\015\017\016\041\017\062\023\030\026\032\027\011\030" +
    "\040\031\063\032\065\033\064\034\061\035\060\036\067" +
    "\041\074\042\024\043\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\004\200\006\013" +
    "\011\034\014\035\015\017\016\041\017\062\023\030\026" +
    "\032\027\011\030\040\031\063\032\065\033\064\034\061" +
    "\035\060\036\067\041\074\042\024\043\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\011\203\016\041" +
    "\017\062\023\030\027\011\030\040\031\063\032\065\033" +
    "\064\034\061\035\060\036\067\041\074\042\024\043\070" +
    "\001\001\000\002\001\001\000\040\011\205\016\041\017" +
    "\062\023\030\027\011\030\040\031\063\032\065\033\064" +
    "\034\061\035\060\036\067\041\074\042\024\043\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\024\210" +
    "\025\211\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\215\001\001\000\052\004\214\006\013\011\034" +
    "\014\035\015\017\016\041\017\062\023\030\026\032\027" +
    "\011\030\040\031\063\032\065\033\064\034\061\035\060" +
    "\036\067\041\074\042\024\043\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\011\217\016\041\017\062" +
    "\023\030\027\011\030\040\031\063\032\065\033\064\034" +
    "\061\035\060\036\067\041\074\042\024\043\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\011\117\016\041\017\062\023\030\027\011\030\040" +
    "\031\063\032\065\033\064\034\061\035\060\036\067\040" +
    "\224\041\074\042\024\043\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\011\231\016\041\017\062\023\030" +
    "\027\011\030\040\031\063\032\065\033\064\034\061\035" +
    "\060\036\067\041\074\042\024\043\070\001\001\000\002" +
    "\001\001\000\040\011\233\016\041\017\062\023\030\027" +
    "\011\030\040\031\063\032\065\033\064\034\061\035\060" +
    "\036\067\041\074\042\024\043\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\011\236\016\041\017\062" +
    "\023\030\027\011\030\040\031\063\032\065\033\064\034" +
    "\061\035\060\036\067\041\074\042\024\043\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\011\241\016" +
    "\041\017\062\023\030\027\011\030\040\031\063\032\065" +
    "\033\064\034\061\035\060\036\067\041\074\042\024\043" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\011\117\016\041\017\062\023\030\027" +
    "\011\030\040\031\063\032\065\033\064\034\061\035\060" +
    "\036\067\040\250\041\074\042\024\043\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\011\255\016\041\017\062\023\030\027\011" +
    "\030\040\031\063\032\065\033\064\034\061\035\060\036" +
    "\067\041\074\042\024\043\070\001\001\000\002\001\001" +
    "\000\040\011\257\016\041\017\062\023\030\027\011\030" +
    "\040\031\063\032\065\033\064\034\061\035\060\036\067" +
    "\041\074\042\024\043\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\011\262\016\041\017\062\023\030" +
    "\027\011\030\040\031\063\032\065\033\064\034\061\035" +
    "\060\036\067\041\074\042\024\043\070\001\001\000\002" +
    "\001\001\000\040\011\264\016\041\017\062\023\030\027" +
    "\011\030\040\031\063\032\065\033\064\034\061\035\060" +
    "\036\067\041\074\042\024\043\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\011\117\016\041\017\062\023\030\027\011\030" +
    "\040\031\063\032\065\033\064\034\061\035\060\036\067" +
    "\040\271\041\074\042\024\043\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\011\303\016\041\017\062\023\030\027\011\030" +
    "\040\031\063\032\065\033\064\034\061\035\060\036\067" +
    "\041\074\042\024\043\070\001\001\000\002\001\001\000" +
    "\040\011\300\016\041\017\062\023\030\027\011\030\040" +
    "\031\063\032\065\033\064\034\061\035\060\036\067\041" +
    "\074\042\024\043\070\001\001\000\002\001\001\000\040" +
    "\011\302\016\041\017\062\023\030\027\011\030\040\031" +
    "\063\032\065\033\064\034\061\035\060\036\067\041\074" +
    "\042\024\043\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\011\306\016\041\017\062" +
    "\023\030\027\011\030\040\031\063\032\065\033\064\034" +
    "\061\035\060\036\067\041\074\042\024\043\070\001\001" +
    "\000\002\001\001\000\040\011\310\016\041\017\062\023" +
    "\030\027\011\030\040\031\063\032\065\033\064\034\061" +
    "\035\060\036\067\041\074\042\024\043\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\011\311\012\315" +
    "\016\041\017\062\023\030\027\011\030\040\031\063\032" +
    "\065\033\064\034\061\035\060\036\067\041\074\042\024" +
    "\043\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\011\321\016\041\017\062\023\030\027\011\030\040\031" +
    "\063\032\065\033\064\034\061\035\060\036\067\041\074" +
    "\042\024\043\070\001\001\000\002\001\001\000\040\011" +
    "\323\016\041\017\062\023\030\027\011\030\040\031\063" +
    "\032\065\033\064\034\061\035\060\036\067\041\074\042" +
    "\024\043\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\004\326\006\013\011\034\014\035\015\017\016" +
    "\041\017\062\023\030\026\032\027\011\030\040\031\063" +
    "\032\065\033\064\034\061\035\060\036\067\041\074\042" +
    "\024\043\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\011\331\016\041\017\062\023\030\027\011\030" +
    "\040\031\063\032\065\033\064\034\061\035\060\036\067" +
    "\041\074\042\024\043\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\011\335\016\041\017\062\020\334" +
    "\021\337\023\030\027\011\030\040\031\063\032\065\033" +
    "\064\034\061\035\060\036\067\041\074\042\024\043\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\011\341\016\041\017\062" +
    "\023\030\027\011\030\040\031\063\032\065\033\064\034" +
    "\061\035\060\036\067\041\074\042\024\043\070\001\001" +
    "\000\002\001\001\000\040\011\343\016\041\017\062\023" +
    "\030\027\011\030\040\031\063\032\065\033\064\034\061" +
    "\035\060\036\067\041\074\042\024\043\070\001\001\000" +
    "\002\001\001\000\042\011\335\016\041\017\062\021\346" +
    "\023\030\027\011\030\040\031\063\032\065\033\064\034" +
    "\061\035\060\036\067\041\074\042\024\043\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\011\350\016" +
    "\041\017\062\023\030\027\011\030\040\031\063\032\065" +
    "\033\064\034\061\035\060\036\067\041\074\042\024\043" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\011\353\016\041\017\062\023\030\027\011\030\040\031" +
    "\063\032\065\033\064\034\061\035\060\036\067\041\074" +
    "\042\024\043\070\001\001\000\002\001\001\000\040\011" +
    "\355\016\041\017\062\023\030\027\011\030\040\031\063" +
    "\032\065\033\064\034\061\035\060\036\067\041\074\042" +
    "\024\043\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\011\360\016\041\017\062\023\030\027\011\030" +
    "\040\031\063\032\065\033\064\034\061\035\060\036\067" +
    "\041\074\042\024\043\070\001\001\000\002\001\001\000" +
    "\040\011\362\016\041\017\062\023\030\027\011\030\040" +
    "\031\063\032\065\033\064\034\061\035\060\036\067\041" +
    "\074\042\024\043\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\011\366\016\041\017" +
    "\062\023\030\027\011\030\040\031\063\032\065\033\064" +
    "\034\061\035\060\036\067\041\074\042\024\043\070\001" +
    "\001\000\002\001\001\000\040\011\370\016\041\017\062" +
    "\023\030\027\011\030\040\031\063\032\065\033\064\034" +
    "\061\035\060\036\067\041\074\042\024\043\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\011\374\016\041\017\062\023\030\027\011\030\040" +
    "\031\063\032\065\033\064\034\061\035\060\036\067\041" +
    "\074\042\024\043\070\001\001\000\002\001\001\000\040" +
    "\011\376\016\041\017\062\023\030\027\011\030\040\031" +
    "\063\032\065\033\064\034\061\035\060\036\067\041\074" +
    "\042\024\043\070\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

		// Create a lexer that reads from
		// supplied input stream or standard input
		if (in == null)
		   in = System.in;
		lexer = new Lexer(in);
	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return this.lexer.next_token();
		} catch (java.io.IOException ioe) {
		    System.out.println ("Unrecognised token");
		    System.out.println(ioe.getMessage());
		    throw ioe;
		}
	  
    }



		Lexer lexer;

		InputStream in = null;

		public Parser(InputStream is) {
	        	in = is;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol current_token) {
				System.err.println("There was an error on Line("+
					this.lexer.getLine() +
					") \n Syntax error at \"" + 
					this.lexer.getChar() + "\" ");

				report_error("Syntax error", current_token);
		
				System.err.println ("\nLast token read is " + this.lexer.getText());

			}
	    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sizeVector ::= SIZE LPAREN LBRACE COLON expList COLON RBRACE RPAREN 
            {
              Exp RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<Exp> el = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new ExpSize(el); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sizeVector",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // listVector ::= LBRACE COLON COLON RBRACE 
            {
              Exp RESULT =null;
		 RESULT = new ExpVector(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listVector",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // listVector ::= LBRACE COLON expList COLON RBRACE 
            {
              Exp RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Exp> el = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new ExpVector(el); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listVector",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // listExp ::= LIST LPAREN LBRACE RBRACE RPAREN 
            {
              Exp RESULT =null;
		 RESULT =new ExpList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listExp",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // listExp ::= LBRACE expList RBRACE 
            {
              Exp RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Exp> el = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ExpList(el); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listExp",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // listExp ::= LIST LPAREN LBRACE expList RBRACE RPAREN 
            {
              Exp RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Exp> el = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT =new ExpList(el); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listExp",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // builtin ::= EQUALQ LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SMPLEqualQ(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("builtin",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // builtin ::= EQVQ LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SMPLEqvQ(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("builtin",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // builtin ::= PAIRQ LPAREN LBRACE expression RBRACE RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new ExpPairQ(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("builtin",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // builtin ::= sizeVector 
            {
              Exp RESULT =null;
		int svleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int svright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp sv = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = sv; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("builtin",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // builtin ::= listVector 
            {
              Exp RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp vl = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = vl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("builtin",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // builtin ::= listExp 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("builtin",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // builtin ::= CDR LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ExpCdr(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("builtin",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // builtin ::= CAR LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ExpCar(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("builtin",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // builtin ::= PAIR LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ExpPair(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("builtin",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // single ::= CHARACTER 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpChar(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // single ::= procCall 
            {
              Exp RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp pc = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = pc;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // single ::= HEX_CHARACTER 
            {
              Exp RESULT =null;
		int hcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int hcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String hc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpChar(hc,true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // single ::= STRING 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpString(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // single ::= builtin 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // single ::= HEX 
            {
              Exp RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SMPLHex(h); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // single ::= BIN 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SMPLBinary(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // single ::= LCURL expressionList RCURL 
            {
              Exp RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpSequence lst = (ExpSequence)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = lst; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // single ::= BOOLEAN 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpBool(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // single ::= VARIABLE 
            {
              Exp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpVar(var); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // single ::= INTEGER 
            {
              Exp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpLit(ilit); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // factor ::= single 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // factor ::= factor BITNOT single 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // term ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // term ::= term MOD factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExpMod(t, f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // term ::= term DIV factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExpDiv(t, f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // term ::= term MUL factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExpMul(t, f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // e ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // e ::= e MINUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExpSub(e, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // e ::= e PLUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExpAdd(e, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // g ::= e 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("g",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // g ::= g BITOR e 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("g",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // g ::= g BITAND e 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("g",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // h ::= g 
            {
              Exp RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp g = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = g;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("h",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // h ::= g LESSEQ g 
            {
              Exp RESULT =null;
		int lgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp lg = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp rg = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpLessEq(lg,rg);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("h",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // h ::= g GREATEREQ g 
            {
              Exp RESULT =null;
		int lgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp lg = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp rg = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpGreaterEq(lg,rg);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("h",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // h ::= g LESS g 
            {
              Exp RESULT =null;
		int lgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp lg = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp rg = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpLess(lg,rg);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("h",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // h ::= g GREATER g 
            {
              Exp RESULT =null;
		int lgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp lg = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp rg = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpGreater(lg,rg);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("h",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // h ::= g EQUAL g 
            {
              Exp RESULT =null;
		int lgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp lg = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp rg = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpEqual(lg,rg);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("h",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // i ::= h 
            {
              Exp RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp h = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = h;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("i",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // i ::= h NOTEQ h 
            {
              Exp RESULT =null;
		int lhleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp lh = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp rh = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpNotEq(lh,rh);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("i",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // j ::= i 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("j",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // j ::= NOT i 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpNot(i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("j",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // k ::= j 
            {
              Exp RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp j = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = j;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("k",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // k ::= k AND j 
            {
              Exp RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp k = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp j = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpAnd(k,j);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("k",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= k 
            {
              Exp RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp k = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = k;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= expression OR k 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp k = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpOr(e,k);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expressions ::= expression COMMA 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expressionList ::= expressions 
            {
              ExpSequence RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExpSequence(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expressionList ::= expressionList expressions 
            {
              ExpSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpSequence lst = (ExpSequence)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		lst.add(e);RESULT = lst;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ifstat ::= IF LPAREN expression RPAREN THEN expression ELSE expression 
            {
              Exp RESULT =null;
		int ifExpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int ifExpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Exp ifExp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int thenExpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int thenExpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp thenExp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elseExpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elseExpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp elseExp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpIfElse(ifExp,thenExp,elseExp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifstat",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ifstat ::= IF LPAREN expression RPAREN THEN expression 
            {
              Exp RESULT =null;
		int ifExpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ifExpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp ifExp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int thenExpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int thenExpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp thenExp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpIf(ifExp,thenExp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifstat",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ifstat ::= IF expression THEN expression ELSE expression 
            {
              Exp RESULT =null;
		int ifExpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int ifExpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp ifExp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int thenExpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int thenExpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp thenExp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elseExpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elseExpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp elseExp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpIfElse(ifExp,thenExp,elseExp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifstat",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ifstat ::= IF expression THEN expression 
            {
              Exp RESULT =null;
		int ifExpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ifExpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp ifExp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int thenExpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int thenExpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp thenExp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpIf(ifExp,thenExp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifstat",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // case ::= ELSE COLON expression 
            {
              Case RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Case(new ExpBool("#t"),c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // case ::= expression COLON expression 
            {
              Case RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Case(p,c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // caseList ::= case 
            {
              CaseSequence RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Case c = (Case)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new CaseSequence(c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caseList",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // caseList ::= caseList COMMA case 
            {
              CaseSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CaseSequence lst = (CaseSequence)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Case c = (Case)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		lst.add(c);RESULT = lst;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caseList",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // paramList ::= VARIABLE 
            {
              ArrayList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		ArrayList lst = new ArrayList();lst.add(v);RESULT = lst;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramList",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // paramList ::= paramList COMMA VARIABLE 
            {
              ArrayList RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList params = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		params.add(v);RESULT = params;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramList",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // procDef ::= PROC LPAREN RPAREN stmt 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		ArrayList<String> lst = new ArrayList<String>();
												RESULT = new ProcDef(lst,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procDef",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // procDef ::= PROC LPAREN paramList RPAREN stmt 
            {
              Exp RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList lst = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ProcDef(lst,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procDef",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expList ::= expression 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		ArrayList<Exp> lst = new ArrayList<Exp>();lst.add(e);RESULT = lst;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expList",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expList ::= expList COMMA expression 
            {
              ArrayList<Exp> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Exp> lst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 lst.add(e);RESULT = lst; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expList",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // procCall ::= VARIABLE LPAREN RPAREN 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new ProcCall(v, new ArrayList<Exp>());; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procCall",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // procCall ::= VARIABLE LPAREN expList RPAREN 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Exp> args = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new ProcCall(v, args);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procCall",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= SETBG LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ExpBg(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= SETFG LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ExpFg(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= CLEAR LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ExpClear(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= CPATH LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= PATH LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= CIRCLE LPAREN expression COMMA expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ExpCircle(e1,e2,e3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= RECT LPAREN expression COMMA expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ExpRect(e1,e2,e3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= PT LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ExpPt(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= CANVAS LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ExpCanvas(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= procDef 
            {
              Exp RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp pd = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = pd;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= PRINTLN LPAREN stmt RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new ExpPrintLn(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= PRINT LPAREN stmt RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new ExpPrint(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= CASE LCURL caseList RCURL 
            {
              Exp RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CaseSequence lst = (CaseSequence)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = lst;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= LET LPAREN bindlist RPAREN stmt 
            {
              Exp RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		BindSequence lst = (BindSequence)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExpLet(lst,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= ifstat 
            {
              Exp RESULT =null;
		int ifstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ifstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp ifst = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ifst;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bindlist ::= bindlist COMMA letdfn 
            {
              BindSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		BindSequence lst = (BindSequence)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LetDef b = (LetDef)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		lst.add(b);RESULT = lst;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bindlist",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bindlist ::= letdfn 
            {
              BindSequence RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LetDef b = (LetDef)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BindSequence(b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bindlist",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // definition ::= VARIABLE ASSIGN expression 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new StmtDefinition(v, e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("definition",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // definition ::= DEF VARIABLE stmt 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new StmtDefinition(v, e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("definition",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Statement(s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= expression 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Statement(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= definition 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = d;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmts ::= stmt SEMICOL 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = s;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmts 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new StmtSequence(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmts 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		lst.add(s);RESULT = lst;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArithProgram start_val = (ArithProgram)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              ArithProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArithProgram(s);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

